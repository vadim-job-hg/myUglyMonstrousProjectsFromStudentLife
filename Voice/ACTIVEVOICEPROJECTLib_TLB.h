// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 34747 $
// File generated on 10.01.2015 18:47:49 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Windows\speech\XVoice.dll (1)
// LIBID: {EEE78583-FE22-11D0-8BEF-0060081841DE}
// LCID: 0
// Helpfile: 
// HelpString: Microsoft Direct Speech Synthesis
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   ACTIVEVOICEPROJECTLib_TLBH
#define   ACTIVEVOICEPROJECTLib_TLBH

#pragma option push -b -a4 -w-inl -w-8118

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Activevoiceprojectlib_tlb
{

// *********************************************************************//
// HelpString: Microsoft Direct Speech Synthesis
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_ACTIVEVOICEPROJECTLib;
extern __declspec (package) const GUID DIID__DirectSSEvents;
extern __declspec (package) const GUID IID_IDirectSS;
extern __declspec (package) const GUID CLSID_DirectSS;
extern __declspec (package) const GUID CLSID_VoiceProp;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{EEE78597-FE22-11D0-8BEF-0060081841DE}") _DirectSSEvents;
typedef TComInterface<_DirectSSEvents, &DIID__DirectSSEvents> _DirectSSEventsPtr;

interface DECLSPEC_UUID("{EEE78590-FE22-11D0-8BEF-0060081841DE}") IDirectSS;
typedef TComInterface<IDirectSS, &IID_IDirectSS> IDirectSSPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IDirectSS DirectSS;
typedef IDirectSSPtr DirectSSPtr;
typedef IUnknown VoiceProp;
typedef IUnknownPtr VoicePropPtr;

#define LIBID_OF_DirectSS (&LIBID_ACTIVEVOICEPROJECTLib)
#define LIBID_OF_VoiceProp (&LIBID_ACTIVEVOICEPROJECTLib)
// *********************************************************************//
// Interface: _DirectSSEvents
// Flags:     (4096) Dispatchable
// GUID:      {EEE78597-FE22-11D0-8BEF-0060081841DE}
// *********************************************************************//
interface _DirectSSEvents : public TDispWrapper<IDispatch>
{
  void __fastcall ClickIn(long x/*[in]*/, long y/*[in]*/)
  {
    _TDispID _dispid(/* ClickIn */ DISPID(1));
    TAutoArgs<2> _args;
    _args[1] = x /*[VT_I4:0]*/;
    _args[2] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall ClickOut(long x/*[in]*/, long y/*[in]*/)
  {
    _TDispID _dispid(/* ClickOut */ DISPID(2));
    TAutoArgs<2> _args;
    _args[1] = x /*[VT_I4:0]*/;
    _args[2] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall AudioStart(long hi/*[in]*/, long lo/*[in]*/)
  {
    _TDispID _dispid(/* AudioStart */ DISPID(3));
    TAutoArgs<2> _args;
    _args[1] = hi /*[VT_I4:0]*/;
    _args[2] = lo /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall AudioStop(long hi/*[in]*/, long lo/*[in]*/)
  {
    _TDispID _dispid(/* AudioStop */ DISPID(4));
    TAutoArgs<2> _args;
    _args[1] = hi /*[VT_I4:0]*/;
    _args[2] = lo /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  HRESULT __fastcall AttribChanged(long which_attribute)
  {
    _TDispID _dispid(/* AttribChanged */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = which_attribute /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Visual(long timehi, long timelo, short Phoneme, short EnginePhoneme, long hints
                            , short MouthHeight, short bMouthWidth, short bMouthUpturn, 
                            short bJawOpen, short TeethUpperVisible, short TeethLowerVisible, 
                            short TonguePosn, short LipTension)
  {
    _TDispID _dispid(/* Visual */ DISPID(6));
    TAutoArgs<13> _args;
    _args[1] = timehi /*[VT_I4:0]*/;
    _args[2] = timelo /*[VT_I4:0]*/;
    _args[3] = Phoneme /*[VT_I2:0]*/;
    _args[4] = EnginePhoneme /*[VT_I2:0]*/;
    _args[5] = hints /*[VT_I4:0]*/;
    _args[6] = MouthHeight /*[VT_I2:0]*/;
    _args[7] = bMouthWidth /*[VT_I2:0]*/;
    _args[8] = bMouthUpturn /*[VT_I2:0]*/;
    _args[9] = bJawOpen /*[VT_I2:0]*/;
    _args[10] = TeethUpperVisible /*[VT_I2:0]*/;
    _args[11] = TeethLowerVisible /*[VT_I2:0]*/;
    _args[12] = TonguePosn /*[VT_I2:0]*/;
    _args[13] = LipTension /*[VT_I2:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall WordPosition(long hi, long lo, long byteoffset)
  {
    _TDispID _dispid(/* WordPosition */ DISPID(7));
    TAutoArgs<3> _args;
    _args[1] = hi /*[VT_I4:0]*/;
    _args[2] = lo /*[VT_I4:0]*/;
    _args[3] = byteoffset /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall BookMark(long hi, long lo, long MarkNum)
  {
    _TDispID _dispid(/* BookMark */ DISPID(8));
    TAutoArgs<3> _args;
    _args[1] = hi /*[VT_I4:0]*/;
    _args[2] = lo /*[VT_I4:0]*/;
    _args[3] = MarkNum /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall TextDataStarted(long hi, long lo)
  {
    _TDispID _dispid(/* TextDataStarted */ DISPID(9));
    TAutoArgs<2> _args;
    _args[1] = hi /*[VT_I4:0]*/;
    _args[2] = lo /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall TextDataDone(long hi, long lo, long Flags)
  {
    _TDispID _dispid(/* TextDataDone */ DISPID(10));
    TAutoArgs<3> _args;
    _args[1] = hi /*[VT_I4:0]*/;
    _args[2] = lo /*[VT_I4:0]*/;
    _args[3] = Flags /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall ActiveVoiceStartup(long init, long init2)
  {
    _TDispID _dispid(/* ActiveVoiceStartup */ DISPID(11));
    TAutoArgs<2> _args;
    _args[1] = init /*[VT_I4:0]*/;
    _args[2] = init2 /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Debugging()
  {
    _TDispID _dispid(/* Debugging */ DISPID(12));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall Error(unsigned_long warning, BSTR Details, BSTR Message)
  {
    _TDispID _dispid(/* Error */ DISPID(13));
    TAutoArgs<3> _args;
    _args[1] = warning /*[VT_UI4:0]*/;
    _args[2] = Details /*[VT_BSTR:0]*/;
    _args[3] = Message /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall warning(unsigned_long warning, BSTR Details, BSTR Message)
  {
    _TDispID _dispid(/* warning */ DISPID(14));
    TAutoArgs<3> _args;
    _args[1] = warning /*[VT_UI4:0]*/;
    _args[2] = Details /*[VT_BSTR:0]*/;
    _args[3] = Message /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall VisualFuture(long milliseconds, long timehi, long timelo, short Phoneme, 
                                  short EnginePhoneme, long hints, short MouthHeight, 
                                  short bMouthWidth, short bMouthUpturn, short bJawOpen, 
                                  short TeethUpperVisible, short TeethLowerVisible, short TonguePosn
                                  , short LipTension)
  {
    _TDispID _dispid(/* VisualFuture */ DISPID(15));
    TAutoArgs<14> _args;
    _args[1] = milliseconds /*[VT_I4:0]*/;
    _args[2] = timehi /*[VT_I4:0]*/;
    _args[3] = timelo /*[VT_I4:0]*/;
    _args[4] = Phoneme /*[VT_I2:0]*/;
    _args[5] = EnginePhoneme /*[VT_I2:0]*/;
    _args[6] = hints /*[VT_I4:0]*/;
    _args[7] = MouthHeight /*[VT_I2:0]*/;
    _args[8] = bMouthWidth /*[VT_I2:0]*/;
    _args[9] = bMouthUpturn /*[VT_I2:0]*/;
    _args[10] = bJawOpen /*[VT_I2:0]*/;
    _args[11] = TeethUpperVisible /*[VT_I2:0]*/;
    _args[12] = TeethLowerVisible /*[VT_I2:0]*/;
    _args[13] = TonguePosn /*[VT_I2:0]*/;
    _args[14] = LipTension /*[VT_I2:0]*/;
    return OleFunction(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IDirectSS
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EEE78590-FE22-11D0-8BEF-0060081841DE}
// *********************************************************************//
interface IDirectSS  : public IDispatch
{
public:
  // [1] property debug
  virtual HRESULT STDMETHODCALLTYPE get_debug(short* pVal/*[out,retval]*/) = 0;
  // [1] property debug
  virtual HRESULT STDMETHODCALLTYPE set_debug(short pVal/*[in]*/) = 0;
  // [2] property Initialized
  virtual HRESULT STDMETHODCALLTYPE get_Initialized(short* pVal/*[out,retval]*/) = 0;
  // [2] property Initialized
  virtual HRESULT STDMETHODCALLTYPE set_Initialized(short pVal/*[in]*/) = 0;
  // [6] method Speak
  virtual HRESULT STDMETHODCALLTYPE Speak(BSTR text) = 0;
  // [7] property Pitch
  virtual HRESULT STDMETHODCALLTYPE get_Pitch(long* pVal/*[out,retval]*/) = 0;
  // [7] property Pitch
  virtual HRESULT STDMETHODCALLTYPE set_Pitch(long pVal/*[in]*/) = 0;
  // [8] property MaxPitch
  virtual HRESULT STDMETHODCALLTYPE get_MaxPitch(long* pVal/*[out,retval]*/) = 0;
  // [8] property MaxPitch
  virtual HRESULT STDMETHODCALLTYPE set_MaxPitch(long pVal/*[in]*/) = 0;
  // [9] property MinPitch
  virtual HRESULT STDMETHODCALLTYPE get_MinPitch(long* pVal/*[out,retval]*/) = 0;
  // [9] property MinPitch
  virtual HRESULT STDMETHODCALLTYPE set_MinPitch(long pVal/*[in]*/) = 0;
  // [10] property Speed
  virtual HRESULT STDMETHODCALLTYPE get_Speed(long* pVal/*[out,retval]*/) = 0;
  // [10] property Speed
  virtual HRESULT STDMETHODCALLTYPE set_Speed(long pVal/*[in]*/) = 0;
  // [11] property MaxSpeed
  virtual HRESULT STDMETHODCALLTYPE get_MaxSpeed(long* pVal/*[out,retval]*/) = 0;
  // [11] property MaxSpeed
  virtual HRESULT STDMETHODCALLTYPE set_MaxSpeed(long pVal/*[in]*/) = 0;
  // [12] property MinSpeed
  virtual HRESULT STDMETHODCALLTYPE get_MinSpeed(long* pVal/*[out,retval]*/) = 0;
  // [12] property MinSpeed
  virtual HRESULT STDMETHODCALLTYPE set_MinSpeed(long pVal/*[in]*/) = 0;
  // [13] property VolumeRight
  virtual HRESULT STDMETHODCALLTYPE get_VolumeRight(long* pVal/*[out,retval]*/) = 0;
  // [13] property VolumeRight
  virtual HRESULT STDMETHODCALLTYPE set_VolumeRight(long pVal/*[in]*/) = 0;
  // [14] property MinVolumeRight
  virtual HRESULT STDMETHODCALLTYPE get_MinVolumeRight(long* pVal/*[out,retval]*/) = 0;
  // [14] property MinVolumeRight
  virtual HRESULT STDMETHODCALLTYPE set_MinVolumeRight(long pVal/*[in]*/) = 0;
  // [15] property MaxVolumeRight
  virtual HRESULT STDMETHODCALLTYPE get_MaxVolumeRight(long* pVal/*[out,retval]*/) = 0;
  // [15] property MaxVolumeRight
  virtual HRESULT STDMETHODCALLTYPE set_MaxVolumeRight(long pVal/*[in]*/) = 0;
  // [16] method Select
  virtual HRESULT STDMETHODCALLTYPE Select(int index) = 0;
  // [17] method EngineID
  virtual HRESULT STDMETHODCALLTYPE EngineID(int index, BSTR* pVal/*[out,retval]*/) = 0;
  // [18] property CountEngines
  virtual HRESULT STDMETHODCALLTYPE get_CountEngines(long* pVal/*[out,retval]*/) = 0;
  // [19] method ModeName
  virtual HRESULT STDMETHODCALLTYPE ModeName(int index, BSTR* pVal/*[out,retval]*/) = 0;
  // [20] method MfgName
  virtual HRESULT STDMETHODCALLTYPE MfgName(int index, BSTR* pVal/*[out,retval]*/) = 0;
  // [21] method ProductName
  virtual HRESULT STDMETHODCALLTYPE ProductName(int index, BSTR* pVal/*[out,retval]*/) = 0;
  // [22] method ModeID
  virtual HRESULT STDMETHODCALLTYPE ModeID(int index, BSTR* pVal/*[out,retval]*/) = 0;
  // [23] method Speaker
  virtual HRESULT STDMETHODCALLTYPE Speaker(int index, BSTR* pVal/*[out,retval]*/) = 0;
  // [24] method Style
  virtual HRESULT STDMETHODCALLTYPE Style(int index, BSTR* pVal/*[out,retval]*/) = 0;
  // [25] method Gender
  virtual HRESULT STDMETHODCALLTYPE Gender(int index, long* Gender/*[out,retval]*/) = 0;
  // [26] method Age
  virtual HRESULT STDMETHODCALLTYPE Age(int index, long* pVal/*[out,retval]*/) = 0;
  // [27] method Features
  virtual HRESULT STDMETHODCALLTYPE Features(int index, long* pVal/*[out,retval]*/) = 0;
  // [28] method Interfaces
  virtual HRESULT STDMETHODCALLTYPE Interfaces(int index, long* pVal/*[out,retval]*/) = 0;
  // [29] method EngineFeatures
  virtual HRESULT STDMETHODCALLTYPE EngineFeatures(int index, long* pVal/*[out,retval]*/) = 0;
  // [30] method LanguageID
  virtual HRESULT STDMETHODCALLTYPE LanguageID(int index, long* pVal/*[out,retval]*/) = 0;
  // [31] method Dialect
  virtual HRESULT STDMETHODCALLTYPE Dialect(int index, BSTR* pVal/*[out,retval]*/) = 0;
  // [32] property RealTime
  virtual HRESULT STDMETHODCALLTYPE get_RealTime(long* pVal/*[out,retval]*/) = 0;
  // [32] property RealTime
  virtual HRESULT STDMETHODCALLTYPE set_RealTime(long pVal/*[in]*/) = 0;
  // [33] property MaxRealTime
  virtual HRESULT STDMETHODCALLTYPE get_MaxRealTime(long* pVal/*[out,retval]*/) = 0;
  // [34] property MinRealTime
  virtual HRESULT STDMETHODCALLTYPE get_MinRealTime(long* pVal/*[out,retval]*/) = 0;
  // [34] property MinRealTime
  virtual HRESULT STDMETHODCALLTYPE set_MinRealTime(long pVal/*[in]*/) = 0;
  // [35] method AudioPause
  virtual HRESULT STDMETHODCALLTYPE AudioPause(void) = 0;
  // [36] method AudioReset
  virtual HRESULT STDMETHODCALLTYPE AudioReset(void) = 0;
  // [37] method AudioResume
  virtual HRESULT STDMETHODCALLTYPE AudioResume(void) = 0;
  // [38] method Inject
  virtual HRESULT STDMETHODCALLTYPE Inject(BSTR value) = 0;
  // [39] property Tagged
  virtual HRESULT STDMETHODCALLTYPE get_Tagged(long* pVal/*[out,retval]*/) = 0;
  // [39] property Tagged
  virtual HRESULT STDMETHODCALLTYPE set_Tagged(long pVal/*[in]*/) = 0;
  // [40] method Phonemes
  virtual HRESULT STDMETHODCALLTYPE Phonemes(long charset, long Flags, BSTR input, 
                                             BSTR* output/*[out,retval]*/) = 0;
  // [41] method PosnGet
  virtual HRESULT STDMETHODCALLTYPE PosnGet(long* hi, long* lo) = 0;
  // [42] method TextData
  virtual HRESULT STDMETHODCALLTYPE TextData(long characterset, long Flags, BSTR text) = 0;
  // [43] method InitAudioDestMM
  virtual HRESULT STDMETHODCALLTYPE InitAudioDestMM(long deviceid) = 0;
  // [44] method AboutDlg
  virtual HRESULT STDMETHODCALLTYPE AboutDlg(long hWnd, BSTR title) = 0;
  // [45] method GeneralDlg
  virtual HRESULT STDMETHODCALLTYPE GeneralDlg(long hWnd, BSTR title) = 0;
  // [46] method LexiconDlg
  virtual HRESULT STDMETHODCALLTYPE LexiconDlg(long hWnd, BSTR title) = 0;
  // [47] method TranslateDlg
  virtual HRESULT STDMETHODCALLTYPE TranslateDlg(long hWnd, BSTR title) = 0;
  // [48] method FindEngine
  virtual HRESULT STDMETHODCALLTYPE FindEngine(BSTR EngineID, BSTR MfgName, BSTR ProductName, 
                                               BSTR ModeID, BSTR ModeName, long LanguageID, 
                                               BSTR Dialect, BSTR Speaker, BSTR Style, long Gender, 
                                               long Age, long Features, long Interfaces, 
                                               long EngineFeatures, long RankEngineID, 
                                               long RankMfgName, long RankProductName, 
                                               long RankModeID, long RankModeName, long RankLanguage, 
                                               long RankDialect, long RankSpeaker, long RankStyle, 
                                               long RankGender, long RankAge, long RankFeatures, 
                                               long RankInterfaces, long RankEngineFeatures, 
                                               long* index/*[out,retval]*/) = 0;
  // [49] property MouthHeight
  virtual HRESULT STDMETHODCALLTYPE get_MouthHeight(short* pVal/*[out,retval]*/) = 0;
  // [49] property MouthHeight
  virtual HRESULT STDMETHODCALLTYPE set_MouthHeight(short pVal/*[in]*/) = 0;
  // [50] property MouthWidth
  virtual HRESULT STDMETHODCALLTYPE get_MouthWidth(short* pVal/*[out,retval]*/) = 0;
  // [50] property MouthWidth
  virtual HRESULT STDMETHODCALLTYPE set_MouthWidth(short pVal/*[in]*/) = 0;
  // [51] property MouthUpturn
  virtual HRESULT STDMETHODCALLTYPE get_MouthUpturn(short* pVal/*[out,retval]*/) = 0;
  // [51] property MouthUpturn
  virtual HRESULT STDMETHODCALLTYPE set_MouthUpturn(short pVal/*[in]*/) = 0;
  // [52] property JawOpen
  virtual HRESULT STDMETHODCALLTYPE get_JawOpen(short* pVal/*[out,retval]*/) = 0;
  // [52] property JawOpen
  virtual HRESULT STDMETHODCALLTYPE set_JawOpen(short pVal/*[in]*/) = 0;
  // [53] property TeethUpperVisible
  virtual HRESULT STDMETHODCALLTYPE get_TeethUpperVisible(short* pVal/*[out,retval]*/) = 0;
  // [53] property TeethUpperVisible
  virtual HRESULT STDMETHODCALLTYPE set_TeethUpperVisible(short pVal/*[in]*/) = 0;
  // [54] property TeethLowerVisible
  virtual HRESULT STDMETHODCALLTYPE get_TeethLowerVisible(short* pVal/*[out,retval]*/) = 0;
  // [54] property TeethLowerVisible
  virtual HRESULT STDMETHODCALLTYPE set_TeethLowerVisible(short pVal/*[in]*/) = 0;
  // [55] property TonguePosn
  virtual HRESULT STDMETHODCALLTYPE get_TonguePosn(short* pVal/*[out,retval]*/) = 0;
  // [55] property TonguePosn
  virtual HRESULT STDMETHODCALLTYPE set_TonguePosn(short pVal/*[in]*/) = 0;
  // [56] property LipTension
  virtual HRESULT STDMETHODCALLTYPE get_LipTension(short* pVal/*[out,retval]*/) = 0;
  // [56] property LipTension
  virtual HRESULT STDMETHODCALLTYPE set_LipTension(short pVal/*[in]*/) = 0;
  // [57] property CallBacksEnabled
  virtual HRESULT STDMETHODCALLTYPE get_CallBacksEnabled(short* pVal/*[out,retval]*/) = 0;
  // [57] property CallBacksEnabled
  virtual HRESULT STDMETHODCALLTYPE set_CallBacksEnabled(short pVal/*[in]*/) = 0;
  // [58] property MouthEnabled
  virtual HRESULT STDMETHODCALLTYPE get_MouthEnabled(short* pVal/*[out,retval]*/) = 0;
  // [58] property MouthEnabled
  virtual HRESULT STDMETHODCALLTYPE set_MouthEnabled(short pVal/*[in]*/) = 0;
  // [59] property LastError
  virtual HRESULT STDMETHODCALLTYPE get_LastError(long* pVal/*[out,retval]*/) = 0;
  // [59] property LastError
  virtual HRESULT STDMETHODCALLTYPE set_LastError(long pVal/*[in]*/) = 0;
  // [60] property SuppressExceptions
  virtual HRESULT STDMETHODCALLTYPE get_SuppressExceptions(short* pVal/*[out,retval]*/) = 0;
  // [60] property SuppressExceptions
  virtual HRESULT STDMETHODCALLTYPE set_SuppressExceptions(short pVal/*[in]*/) = 0;
  // [61] property Speaking
  virtual HRESULT STDMETHODCALLTYPE get_Speaking(short* pVal/*[out,retval]*/) = 0;
  // [61] property Speaking
  virtual HRESULT STDMETHODCALLTYPE set_Speaking(short pVal/*[in]*/) = 0;
  // [62] property LastWordPosition
  virtual HRESULT STDMETHODCALLTYPE get_LastWordPosition(long* pVal/*[out,retval]*/) = 0;
  // [62] property LastWordPosition
  virtual HRESULT STDMETHODCALLTYPE set_LastWordPosition(long pVal/*[in]*/) = 0;
  // [63] property LipType
  virtual HRESULT STDMETHODCALLTYPE get_LipType(short* pVal/*[out,retval]*/) = 0;
  // [63] property LipType
  virtual HRESULT STDMETHODCALLTYPE set_LipType(short pVal/*[in]*/) = 0;
  // [64] method GetPronunciation
  virtual HRESULT STDMETHODCALLTYPE GetPronunciation(long charset, BSTR text, long Sense, 
                                                     BSTR* Pronounce, long* PartOfSpeech, 
                                                     BSTR* EngineInfo) = 0;
  // [65] method InitAudioDestDirect
  virtual HRESULT STDMETHODCALLTYPE InitAudioDestDirect(long direct) = 0;
  // [66] property Sayit
  virtual HRESULT STDMETHODCALLTYPE get_Sayit(BSTR* newVal/*[out,retval]*/) = 0;
  // [66] property Sayit
  virtual HRESULT STDMETHODCALLTYPE set_Sayit(BSTR newVal/*[in]*/) = 0;
  // [67] method InitAudioDestObject
  virtual HRESULT STDMETHODCALLTYPE InitAudioDestObject(long object) = 0;
  // [68] property FileName
  virtual HRESULT STDMETHODCALLTYPE get_FileName(BSTR* pVal/*[out,retval]*/) = 0;
  // [68] property FileName
  virtual HRESULT STDMETHODCALLTYPE set_FileName(BSTR pVal/*[in]*/) = 0;
  // [69] property CurrentMode
  virtual HRESULT STDMETHODCALLTYPE get_CurrentMode(long* pVal/*[out,retval]*/) = 0;
  // [69] property CurrentMode
  virtual HRESULT STDMETHODCALLTYPE set_CurrentMode(long pVal/*[in]*/) = 0;
  // [70] property hWnd
  virtual HRESULT STDMETHODCALLTYPE get_hWnd(long* pVal/*[out,retval]*/) = 0;
  // [71] method Find
  virtual HRESULT STDMETHODCALLTYPE Find(BSTR RankList, long* index/*[out,retval]*/) = 0;
  // [72] property VolumeLeft
  virtual HRESULT STDMETHODCALLTYPE get_VolumeLeft(long* pVal/*[out,retval]*/) = 0;
  // [72] property VolumeLeft
  virtual HRESULT STDMETHODCALLTYPE set_VolumeLeft(long pVal/*[in]*/) = 0;
  // [73] property MinVolumeLeft
  virtual HRESULT STDMETHODCALLTYPE get_MinVolumeLeft(long* pVal/*[out,retval]*/) = 0;
  // [73] property MinVolumeLeft
  virtual HRESULT STDMETHODCALLTYPE set_MinVolumeLeft(long pVal/*[in]*/) = 0;
  // [74] property MaxVolumeLeft
  virtual HRESULT STDMETHODCALLTYPE get_MaxVolumeLeft(long* pVal/*[out,retval]*/) = 0;
  // [74] property MaxVolumeLeft
  virtual HRESULT STDMETHODCALLTYPE set_MaxVolumeLeft(long pVal/*[in]*/) = 0;
  // [75] property AudioDest
  virtual HRESULT STDMETHODCALLTYPE get_AudioDest(long* pVal/*[out,retval]*/) = 0;
  // [76] property Attributes
  virtual HRESULT STDMETHODCALLTYPE get_Attributes(long Attrib, long* pVal/*[out,retval]*/) = 0;
  // [76] property Attributes
  virtual HRESULT STDMETHODCALLTYPE set_Attributes(long Attrib, long pVal/*[in]*/) = 0;
  // [77] property AttributeString
  virtual HRESULT STDMETHODCALLTYPE get_AttributeString(long Attrib, BSTR* pVal/*[out,retval]*/) = 0;
  // [77] property AttributeString
  virtual HRESULT STDMETHODCALLTYPE set_AttributeString(long Attrib, BSTR pVal/*[in]*/) = 0;
  // [78] property AttributeMemory
  virtual HRESULT STDMETHODCALLTYPE get_AttributeMemory(long Attrib, long* size, 
                                                        long* pVal/*[out,retval]*/) = 0;
  // [78] property AttributeMemory
  virtual HRESULT STDMETHODCALLTYPE set_AttributeMemory(long Attrib, long* size, long pVal/*[in]*/) = 0;
  // [79] method LexAddTo
  virtual HRESULT STDMETHODCALLTYPE LexAddTo(unsigned_long lex, long charset, BSTR text, 
                                             BSTR Pronounce, long PartOfSpeech, long EngineInfo, 
                                             long engineinfosize) = 0;
  // [80] method LexGetFrom
  virtual HRESULT STDMETHODCALLTYPE LexGetFrom(long lex, long charset, BSTR text, long Sense, 
                                               BSTR* Pronounce, long* PartOfSpeech, long* EngineInfo, 
                                               long* sizeofengineinfo) = 0;
  // [81] method LexRemoveFrom
  virtual HRESULT STDMETHODCALLTYPE LexRemoveFrom(long lex, BSTR text, long Sense) = 0;
  // [82] method QueryLexicons
  virtual HRESULT STDMETHODCALLTYPE QueryLexicons(long f, long* pdw) = 0;
  // [83] method ChangeSpelling
  virtual HRESULT STDMETHODCALLTYPE ChangeSpelling(long lex, BSTR stringa, BSTR stringb) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  short __fastcall get_debug(void)
  {
    short pVal;
    OLECHECK(this->get_debug((short*)&pVal));
    return pVal;
  }

  short __fastcall get_Initialized(void)
  {
    short pVal;
    OLECHECK(this->get_Initialized((short*)&pVal));
    return pVal;
  }

  long __fastcall get_Pitch(void)
  {
    long pVal;
    OLECHECK(this->get_Pitch((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MaxPitch(void)
  {
    long pVal;
    OLECHECK(this->get_MaxPitch((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MinPitch(void)
  {
    long pVal;
    OLECHECK(this->get_MinPitch((long*)&pVal));
    return pVal;
  }

  long __fastcall get_Speed(void)
  {
    long pVal;
    OLECHECK(this->get_Speed((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MaxSpeed(void)
  {
    long pVal;
    OLECHECK(this->get_MaxSpeed((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MinSpeed(void)
  {
    long pVal;
    OLECHECK(this->get_MinSpeed((long*)&pVal));
    return pVal;
  }

  long __fastcall get_VolumeRight(void)
  {
    long pVal;
    OLECHECK(this->get_VolumeRight((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MinVolumeRight(void)
  {
    long pVal;
    OLECHECK(this->get_MinVolumeRight((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MaxVolumeRight(void)
  {
    long pVal;
    OLECHECK(this->get_MaxVolumeRight((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall EngineID(int index)
  {
    BSTR pVal = 0;
    OLECHECK(this->EngineID(index, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_CountEngines(void)
  {
    long pVal;
    OLECHECK(this->get_CountEngines((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall ModeName(int index)
  {
    BSTR pVal = 0;
    OLECHECK(this->ModeName(index, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall MfgName(int index)
  {
    BSTR pVal = 0;
    OLECHECK(this->MfgName(index, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall ProductName(int index)
  {
    BSTR pVal = 0;
    OLECHECK(this->ProductName(index, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall ModeID(int index)
  {
    BSTR pVal = 0;
    OLECHECK(this->ModeID(index, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall Speaker(int index)
  {
    BSTR pVal = 0;
    OLECHECK(this->Speaker(index, (BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall Style(int index)
  {
    BSTR pVal = 0;
    OLECHECK(this->Style(index, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall Gender(int index)
  {
    long Gender;
    OLECHECK(this->Gender(index, (long*)&Gender));
    return Gender;
  }

  long __fastcall Age(int index)
  {
    long pVal;
    OLECHECK(this->Age(index, (long*)&pVal));
    return pVal;
  }

  long __fastcall Features(int index)
  {
    long pVal;
    OLECHECK(this->Features(index, (long*)&pVal));
    return pVal;
  }

  long __fastcall Interfaces(int index)
  {
    long pVal;
    OLECHECK(this->Interfaces(index, (long*)&pVal));
    return pVal;
  }

  long __fastcall EngineFeatures(int index)
  {
    long pVal;
    OLECHECK(this->EngineFeatures(index, (long*)&pVal));
    return pVal;
  }

  long __fastcall LanguageID(int index)
  {
    long pVal;
    OLECHECK(this->LanguageID(index, (long*)&pVal));
    return pVal;
  }

  BSTR __fastcall Dialect(int index)
  {
    BSTR pVal = 0;
    OLECHECK(this->Dialect(index, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_RealTime(void)
  {
    long pVal;
    OLECHECK(this->get_RealTime((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MaxRealTime(void)
  {
    long pVal;
    OLECHECK(this->get_MaxRealTime((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MinRealTime(void)
  {
    long pVal;
    OLECHECK(this->get_MinRealTime((long*)&pVal));
    return pVal;
  }

  long __fastcall get_Tagged(void)
  {
    long pVal;
    OLECHECK(this->get_Tagged((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall Phonemes(long charset, long Flags, BSTR input)
  {
    BSTR output = 0;
    OLECHECK(this->Phonemes(charset, Flags, input, (BSTR*)&output));
    return output;
  }

  long __fastcall FindEngine(BSTR EngineID, BSTR MfgName, BSTR ProductName, BSTR ModeID, 
                             BSTR ModeName, long LanguageID, BSTR Dialect, BSTR Speaker, BSTR Style, 
                             long Gender, long Age, long Features, long Interfaces, 
                             long EngineFeatures, long RankEngineID, long RankMfgName, 
                             long RankProductName, long RankModeID, long RankModeName, 
                             long RankLanguage, long RankDialect, long RankSpeaker, long RankStyle, 
                             long RankGender, long RankAge, long RankFeatures, long RankInterfaces, 
                             long RankEngineFeatures)
  {
    long index;
    OLECHECK(this->FindEngine(EngineID, MfgName, ProductName, ModeID, ModeName, LanguageID, Dialect, 
                              Speaker, Style, Gender, Age, Features, Interfaces, EngineFeatures, 
                              RankEngineID, RankMfgName, RankProductName, RankModeID, RankModeName, 
                              RankLanguage, RankDialect, RankSpeaker, RankStyle, RankGender, RankAge, 
                              RankFeatures, RankInterfaces, RankEngineFeatures, (long*)&index));
    return index;
  }

  short __fastcall get_MouthHeight(void)
  {
    short pVal;
    OLECHECK(this->get_MouthHeight((short*)&pVal));
    return pVal;
  }

  short __fastcall get_MouthWidth(void)
  {
    short pVal;
    OLECHECK(this->get_MouthWidth((short*)&pVal));
    return pVal;
  }

  short __fastcall get_MouthUpturn(void)
  {
    short pVal;
    OLECHECK(this->get_MouthUpturn((short*)&pVal));
    return pVal;
  }

  short __fastcall get_JawOpen(void)
  {
    short pVal;
    OLECHECK(this->get_JawOpen((short*)&pVal));
    return pVal;
  }

  short __fastcall get_TeethUpperVisible(void)
  {
    short pVal;
    OLECHECK(this->get_TeethUpperVisible((short*)&pVal));
    return pVal;
  }

  short __fastcall get_TeethLowerVisible(void)
  {
    short pVal;
    OLECHECK(this->get_TeethLowerVisible((short*)&pVal));
    return pVal;
  }

  short __fastcall get_TonguePosn(void)
  {
    short pVal;
    OLECHECK(this->get_TonguePosn((short*)&pVal));
    return pVal;
  }

  short __fastcall get_LipTension(void)
  {
    short pVal;
    OLECHECK(this->get_LipTension((short*)&pVal));
    return pVal;
  }

  short __fastcall get_CallBacksEnabled(void)
  {
    short pVal;
    OLECHECK(this->get_CallBacksEnabled((short*)&pVal));
    return pVal;
  }

  short __fastcall get_MouthEnabled(void)
  {
    short pVal;
    OLECHECK(this->get_MouthEnabled((short*)&pVal));
    return pVal;
  }

  long __fastcall get_LastError(void)
  {
    long pVal;
    OLECHECK(this->get_LastError((long*)&pVal));
    return pVal;
  }

  short __fastcall get_SuppressExceptions(void)
  {
    short pVal;
    OLECHECK(this->get_SuppressExceptions((short*)&pVal));
    return pVal;
  }

  short __fastcall get_Speaking(void)
  {
    short pVal;
    OLECHECK(this->get_Speaking((short*)&pVal));
    return pVal;
  }

  long __fastcall get_LastWordPosition(void)
  {
    long pVal;
    OLECHECK(this->get_LastWordPosition((long*)&pVal));
    return pVal;
  }

  short __fastcall get_LipType(void)
  {
    short pVal;
    OLECHECK(this->get_LipType((short*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Sayit(void)
  {
    BSTR newVal = 0;
    OLECHECK(this->get_Sayit((BSTR*)&newVal));
    return newVal;
  }

  BSTR __fastcall get_FileName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FileName((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_CurrentMode(void)
  {
    long pVal;
    OLECHECK(this->get_CurrentMode((long*)&pVal));
    return pVal;
  }

  long __fastcall get_hWnd(void)
  {
    long pVal;
    OLECHECK(this->get_hWnd((long*)&pVal));
    return pVal;
  }

  long __fastcall Find(BSTR RankList)
  {
    long index;
    OLECHECK(this->Find(RankList, (long*)&index));
    return index;
  }

  long __fastcall get_VolumeLeft(void)
  {
    long pVal;
    OLECHECK(this->get_VolumeLeft((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MinVolumeLeft(void)
  {
    long pVal;
    OLECHECK(this->get_MinVolumeLeft((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MaxVolumeLeft(void)
  {
    long pVal;
    OLECHECK(this->get_MaxVolumeLeft((long*)&pVal));
    return pVal;
  }

  long __fastcall get_AudioDest(void)
  {
    long pVal;
    OLECHECK(this->get_AudioDest((long*)&pVal));
    return pVal;
  }

  long __fastcall get_Attributes(long Attrib)
  {
    long pVal;
    OLECHECK(this->get_Attributes(Attrib, (long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_AttributeString(long Attrib)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_AttributeString(Attrib, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_AttributeMemory(long Attrib, long* size)
  {
    long pVal;
    OLECHECK(this->get_AttributeMemory(Attrib, size, (long*)&pVal));
    return pVal;
  }


  __property   short           debug = {read = get_debug, write = set_debug};
  __property   short           Initialized = {read = get_Initialized, write = set_Initialized};
  __property   long            Pitch = {read = get_Pitch, write = set_Pitch};
  __property   long            MaxPitch = {read = get_MaxPitch, write = set_MaxPitch};
  __property   long            MinPitch = {read = get_MinPitch, write = set_MinPitch};
  __property   long            Speed = {read = get_Speed, write = set_Speed};
  __property   long            MaxSpeed = {read = get_MaxSpeed, write = set_MaxSpeed};
  __property   long            MinSpeed = {read = get_MinSpeed, write = set_MinSpeed};
  __property   long            VolumeRight = {read = get_VolumeRight, write = set_VolumeRight};
  __property   long            MinVolumeRight = {read = get_MinVolumeRight, write = set_MinVolumeRight};
  __property   long            MaxVolumeRight = {read = get_MaxVolumeRight, write = set_MaxVolumeRight};
  __property   long            CountEngines = {read = get_CountEngines};
  __property   long            RealTime = {read = get_RealTime, write = set_RealTime};
  __property   long            MaxRealTime = {read = get_MaxRealTime};
  __property   long            MinRealTime = {read = get_MinRealTime, write = set_MinRealTime};
  __property   long            Tagged = {read = get_Tagged, write = set_Tagged};
  __property   short           MouthHeight = {read = get_MouthHeight, write = set_MouthHeight};
  __property   short           MouthWidth = {read = get_MouthWidth, write = set_MouthWidth};
  __property   short           MouthUpturn = {read = get_MouthUpturn, write = set_MouthUpturn};
  __property   short           JawOpen = {read = get_JawOpen, write = set_JawOpen};
  __property   short           TeethUpperVisible = {read = get_TeethUpperVisible, write = set_TeethUpperVisible};
  __property   short           TeethLowerVisible = {read = get_TeethLowerVisible, write = set_TeethLowerVisible};
  __property   short           TonguePosn = {read = get_TonguePosn, write = set_TonguePosn};
  __property   short           LipTension = {read = get_LipTension, write = set_LipTension};
  __property   short           CallBacksEnabled = {read = get_CallBacksEnabled, write = set_CallBacksEnabled};
  __property   short           MouthEnabled = {read = get_MouthEnabled, write = set_MouthEnabled};
  __property   long            LastError = {read = get_LastError, write = set_LastError};
  __property   short           SuppressExceptions = {read = get_SuppressExceptions, write = set_SuppressExceptions};
  __property   short           Speaking = {read = get_Speaking, write = set_Speaking};
  __property   long            LastWordPosition = {read = get_LastWordPosition, write = set_LastWordPosition};
  __property   short           LipType = {read = get_LipType, write = set_LipType};
  __property   BSTR            Sayit = {read = get_Sayit, write = set_Sayit};
  __property   BSTR            FileName = {read = get_FileName, write = set_FileName};
  __property   long            CurrentMode = {read = get_CurrentMode, write = set_CurrentMode};
  __property   long            hWnd = {read = get_hWnd};
  __property   long            VolumeLeft = {read = get_VolumeLeft, write = set_VolumeLeft};
  __property   long            MinVolumeLeft = {read = get_MinVolumeLeft, write = set_MinVolumeLeft};
  __property   long            MaxVolumeLeft = {read = get_MaxVolumeLeft, write = set_MaxVolumeLeft};
  __property   long            AudioDest = {read = get_AudioDest};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  _DirectSSEvents
// Flags:     (4096) Dispatchable
// GUID:      {EEE78597-FE22-11D0-8BEF-0060081841DE}
// *********************************************************************//
template <class T>
class _DirectSSEventsDispT : public TAutoDriver<_DirectSSEvents>
{
public:
  _DirectSSEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall ClickIn(long x/*[in]*/, long y/*[in]*/);
  void            __fastcall ClickOut(long x/*[in]*/, long y/*[in]*/);
  void            __fastcall AudioStart(long hi/*[in]*/, long lo/*[in]*/);
  void            __fastcall AudioStop(long hi/*[in]*/, long lo/*[in]*/);
  HRESULT         __fastcall AttribChanged(long which_attribute);
  HRESULT         __fastcall Visual(long timehi, long timelo, short Phoneme, short EnginePhoneme, 
                                    long hints, short MouthHeight, short bMouthWidth, 
                                    short bMouthUpturn, short bJawOpen, short TeethUpperVisible, 
                                    short TeethLowerVisible, short TonguePosn, short LipTension);
  HRESULT         __fastcall WordPosition(long hi, long lo, long byteoffset);
  HRESULT         __fastcall BookMark(long hi, long lo, long MarkNum);
  HRESULT         __fastcall TextDataStarted(long hi, long lo);
  HRESULT         __fastcall TextDataDone(long hi, long lo, long Flags);
  HRESULT         __fastcall ActiveVoiceStartup(long init, long init2);
  HRESULT         __fastcall Debugging();
  HRESULT         __fastcall Error(unsigned_long warning, BSTR Details, BSTR Message);
  HRESULT         __fastcall warning(unsigned_long warning, BSTR Details, BSTR Message);
  HRESULT         __fastcall VisualFuture(long milliseconds, long timehi, long timelo, short Phoneme
                                          , short EnginePhoneme, long hints, short MouthHeight, 
                                          short bMouthWidth, short bMouthUpturn, short bJawOpen, 
                                          short TeethUpperVisible, short TeethLowerVisible, 
                                          short TonguePosn, short LipTension);

};
typedef _DirectSSEventsDispT<_DirectSSEvents> _DirectSSEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIDirectSS
// Interface: IDirectSS
// *********************************************************************//
template <class T /* IDirectSS */ >
class TCOMIDirectSST : public TComInterface<IDirectSS>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDirectSST() {}
  TCOMIDirectSST(IDirectSS *intf, bool addRef = false) : TComInterface<IDirectSS>(intf, addRef) {}
  TCOMIDirectSST(const TCOMIDirectSST& src) : TComInterface<IDirectSS>(src) {}
  TCOMIDirectSST& operator=(const TCOMIDirectSST& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_debug(short* pVal/*[out,retval]*/);
  short           __fastcall get_debug(void);
  HRESULT         __fastcall set_debug(short pVal/*[in]*/);
  HRESULT         __fastcall get_Initialized(short* pVal/*[out,retval]*/);
  short           __fastcall get_Initialized(void);
  HRESULT         __fastcall set_Initialized(short pVal/*[in]*/);
  HRESULT         __fastcall Speak(BSTR text);
  HRESULT         __fastcall get_Pitch(long* pVal/*[out,retval]*/);
  long            __fastcall get_Pitch(void);
  HRESULT         __fastcall set_Pitch(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxPitch(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxPitch(void);
  HRESULT         __fastcall set_MaxPitch(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinPitch(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinPitch(void);
  HRESULT         __fastcall set_MinPitch(long pVal/*[in]*/);
  HRESULT         __fastcall get_Speed(long* pVal/*[out,retval]*/);
  long            __fastcall get_Speed(void);
  HRESULT         __fastcall set_Speed(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxSpeed(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxSpeed(void);
  HRESULT         __fastcall set_MaxSpeed(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinSpeed(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinSpeed(void);
  HRESULT         __fastcall set_MinSpeed(long pVal/*[in]*/);
  HRESULT         __fastcall get_VolumeRight(long* pVal/*[out,retval]*/);
  long            __fastcall get_VolumeRight(void);
  HRESULT         __fastcall set_VolumeRight(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinVolumeRight(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinVolumeRight(void);
  HRESULT         __fastcall set_MinVolumeRight(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxVolumeRight(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxVolumeRight(void);
  HRESULT         __fastcall set_MaxVolumeRight(long pVal/*[in]*/);
  HRESULT         __fastcall Select(int index);
  HRESULT         __fastcall EngineID(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall EngineID(int index);
  HRESULT         __fastcall get_CountEngines(long* pVal/*[out,retval]*/);
  long            __fastcall get_CountEngines(void);
  HRESULT         __fastcall ModeName(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ModeName(int index);
  HRESULT         __fastcall MfgName(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall MfgName(int index);
  HRESULT         __fastcall ProductName(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ProductName(int index);
  HRESULT         __fastcall ModeID(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ModeID(int index);
  HRESULT         __fastcall Speaker(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall Speaker(int index);
  HRESULT         __fastcall Style(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall Style(int index);
  HRESULT         __fastcall Gender(int index, long* Gender/*[out,retval]*/);
  long            __fastcall Gender(int index);
  HRESULT         __fastcall Age(int index, long* pVal/*[out,retval]*/);
  long            __fastcall Age(int index);
  HRESULT         __fastcall Features(int index, long* pVal/*[out,retval]*/);
  long            __fastcall Features(int index);
  HRESULT         __fastcall Interfaces(int index, long* pVal/*[out,retval]*/);
  long            __fastcall Interfaces(int index);
  HRESULT         __fastcall EngineFeatures(int index, long* pVal/*[out,retval]*/);
  long            __fastcall EngineFeatures(int index);
  HRESULT         __fastcall LanguageID(int index, long* pVal/*[out,retval]*/);
  long            __fastcall LanguageID(int index);
  HRESULT         __fastcall Dialect(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall Dialect(int index);
  HRESULT         __fastcall get_RealTime(long* pVal/*[out,retval]*/);
  long            __fastcall get_RealTime(void);
  HRESULT         __fastcall set_RealTime(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxRealTime(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxRealTime(void);
  HRESULT         __fastcall get_MinRealTime(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinRealTime(void);
  HRESULT         __fastcall set_MinRealTime(long pVal/*[in]*/);
  HRESULT         __fastcall AudioPause(void);
  HRESULT         __fastcall AudioReset(void);
  HRESULT         __fastcall AudioResume(void);
  HRESULT         __fastcall Inject(BSTR value);
  HRESULT         __fastcall get_Tagged(long* pVal/*[out,retval]*/);
  long            __fastcall get_Tagged(void);
  HRESULT         __fastcall set_Tagged(long pVal/*[in]*/);
  HRESULT         __fastcall Phonemes(long charset, long Flags, BSTR input, 
                                      BSTR* output/*[out,retval]*/);
  BSTR            __fastcall Phonemes(long charset, long Flags, BSTR input);
  HRESULT         __fastcall PosnGet(long* hi, long* lo);
  HRESULT         __fastcall TextData(long characterset, long Flags, BSTR text);
  HRESULT         __fastcall InitAudioDestMM(long deviceid);
  HRESULT         __fastcall AboutDlg(long hWnd, BSTR title);
  HRESULT         __fastcall GeneralDlg(long hWnd, BSTR title);
  HRESULT         __fastcall LexiconDlg(long hWnd, BSTR title);
  HRESULT         __fastcall TranslateDlg(long hWnd, BSTR title);
  HRESULT         __fastcall FindEngine(BSTR EngineID, BSTR MfgName, BSTR ProductName, BSTR ModeID, 
                                        BSTR ModeName, long LanguageID, BSTR Dialect, BSTR Speaker, 
                                        BSTR Style, long Gender, long Age, long Features, 
                                        long Interfaces, long EngineFeatures, long RankEngineID, 
                                        long RankMfgName, long RankProductName, long RankModeID, 
                                        long RankModeName, long RankLanguage, long RankDialect, 
                                        long RankSpeaker, long RankStyle, long RankGender, 
                                        long RankAge, long RankFeatures, long RankInterfaces, 
                                        long RankEngineFeatures, long* index/*[out,retval]*/);
  long            __fastcall FindEngine(BSTR EngineID, BSTR MfgName, BSTR ProductName, BSTR ModeID, 
                                        BSTR ModeName, long LanguageID, BSTR Dialect, BSTR Speaker, 
                                        BSTR Style, long Gender, long Age, long Features, 
                                        long Interfaces, long EngineFeatures, long RankEngineID, 
                                        long RankMfgName, long RankProductName, long RankModeID, 
                                        long RankModeName, long RankLanguage, long RankDialect, 
                                        long RankSpeaker, long RankStyle, long RankGender, 
                                        long RankAge, long RankFeatures, long RankInterfaces, 
                                        long RankEngineFeatures);
  HRESULT         __fastcall get_MouthHeight(short* pVal/*[out,retval]*/);
  short           __fastcall get_MouthHeight(void);
  HRESULT         __fastcall set_MouthHeight(short pVal/*[in]*/);
  HRESULT         __fastcall get_MouthWidth(short* pVal/*[out,retval]*/);
  short           __fastcall get_MouthWidth(void);
  HRESULT         __fastcall set_MouthWidth(short pVal/*[in]*/);
  HRESULT         __fastcall get_MouthUpturn(short* pVal/*[out,retval]*/);
  short           __fastcall get_MouthUpturn(void);
  HRESULT         __fastcall set_MouthUpturn(short pVal/*[in]*/);
  HRESULT         __fastcall get_JawOpen(short* pVal/*[out,retval]*/);
  short           __fastcall get_JawOpen(void);
  HRESULT         __fastcall set_JawOpen(short pVal/*[in]*/);
  HRESULT         __fastcall get_TeethUpperVisible(short* pVal/*[out,retval]*/);
  short           __fastcall get_TeethUpperVisible(void);
  HRESULT         __fastcall set_TeethUpperVisible(short pVal/*[in]*/);
  HRESULT         __fastcall get_TeethLowerVisible(short* pVal/*[out,retval]*/);
  short           __fastcall get_TeethLowerVisible(void);
  HRESULT         __fastcall set_TeethLowerVisible(short pVal/*[in]*/);
  HRESULT         __fastcall get_TonguePosn(short* pVal/*[out,retval]*/);
  short           __fastcall get_TonguePosn(void);
  HRESULT         __fastcall set_TonguePosn(short pVal/*[in]*/);
  HRESULT         __fastcall get_LipTension(short* pVal/*[out,retval]*/);
  short           __fastcall get_LipTension(void);
  HRESULT         __fastcall set_LipTension(short pVal/*[in]*/);
  HRESULT         __fastcall get_CallBacksEnabled(short* pVal/*[out,retval]*/);
  short           __fastcall get_CallBacksEnabled(void);
  HRESULT         __fastcall set_CallBacksEnabled(short pVal/*[in]*/);
  HRESULT         __fastcall get_MouthEnabled(short* pVal/*[out,retval]*/);
  short           __fastcall get_MouthEnabled(void);
  HRESULT         __fastcall set_MouthEnabled(short pVal/*[in]*/);
  HRESULT         __fastcall get_LastError(long* pVal/*[out,retval]*/);
  long            __fastcall get_LastError(void);
  HRESULT         __fastcall set_LastError(long pVal/*[in]*/);
  HRESULT         __fastcall get_SuppressExceptions(short* pVal/*[out,retval]*/);
  short           __fastcall get_SuppressExceptions(void);
  HRESULT         __fastcall set_SuppressExceptions(short pVal/*[in]*/);
  HRESULT         __fastcall get_Speaking(short* pVal/*[out,retval]*/);
  short           __fastcall get_Speaking(void);
  HRESULT         __fastcall set_Speaking(short pVal/*[in]*/);
  HRESULT         __fastcall get_LastWordPosition(long* pVal/*[out,retval]*/);
  long            __fastcall get_LastWordPosition(void);
  HRESULT         __fastcall set_LastWordPosition(long pVal/*[in]*/);
  HRESULT         __fastcall get_LipType(short* pVal/*[out,retval]*/);
  short           __fastcall get_LipType(void);
  HRESULT         __fastcall set_LipType(short pVal/*[in]*/);
  HRESULT         __fastcall GetPronunciation(long charset, BSTR text, long Sense, BSTR* Pronounce, 
                                              long* PartOfSpeech, BSTR* EngineInfo);
  HRESULT         __fastcall InitAudioDestDirect(long direct);
  HRESULT         __fastcall get_Sayit(BSTR* newVal/*[out,retval]*/);
  BSTR            __fastcall get_Sayit(void);
  HRESULT         __fastcall set_Sayit(BSTR newVal/*[in]*/);
  HRESULT         __fastcall InitAudioDestObject(long object);
  HRESULT         __fastcall get_FileName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT         __fastcall set_FileName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CurrentMode(long* pVal/*[out,retval]*/);
  long            __fastcall get_CurrentMode(void);
  HRESULT         __fastcall set_CurrentMode(long pVal/*[in]*/);
  HRESULT         __fastcall get_hWnd(long* pVal/*[out,retval]*/);
  long            __fastcall get_hWnd(void);
  HRESULT         __fastcall Find(BSTR RankList, long* index/*[out,retval]*/);
  long            __fastcall Find(BSTR RankList);
  HRESULT         __fastcall get_VolumeLeft(long* pVal/*[out,retval]*/);
  long            __fastcall get_VolumeLeft(void);
  HRESULT         __fastcall set_VolumeLeft(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinVolumeLeft(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinVolumeLeft(void);
  HRESULT         __fastcall set_MinVolumeLeft(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxVolumeLeft(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxVolumeLeft(void);
  HRESULT         __fastcall set_MaxVolumeLeft(long pVal/*[in]*/);
  HRESULT         __fastcall get_AudioDest(long* pVal/*[out,retval]*/);
  long            __fastcall get_AudioDest(void);
  HRESULT         __fastcall get_Attributes(long Attrib, long* pVal/*[out,retval]*/);
  long            __fastcall get_Attributes(long Attrib);
  HRESULT         __fastcall set_Attributes(long Attrib, long pVal/*[in]*/);
  HRESULT         __fastcall get_AttributeString(long Attrib, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AttributeString(long Attrib);
  HRESULT         __fastcall set_AttributeString(long Attrib, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AttributeMemory(long Attrib, long* size, long* pVal/*[out,retval]*/);
  long            __fastcall get_AttributeMemory(long Attrib, long* size);
  HRESULT         __fastcall set_AttributeMemory(long Attrib, long* size, long pVal/*[in]*/);
  HRESULT         __fastcall LexAddTo(unsigned_long lex, long charset, BSTR text, BSTR Pronounce, 
                                      long PartOfSpeech, long EngineInfo, long engineinfosize);
  HRESULT         __fastcall LexGetFrom(long lex, long charset, BSTR text, long Sense, 
                                        BSTR* Pronounce, long* PartOfSpeech, long* EngineInfo, 
                                        long* sizeofengineinfo);
  HRESULT         __fastcall LexRemoveFrom(long lex, BSTR text, long Sense);
  HRESULT         __fastcall QueryLexicons(long f, long* pdw);
  HRESULT         __fastcall ChangeSpelling(long lex, BSTR stringa, BSTR stringb);

  __property   short           debug = {read = get_debug, write = set_debug};
  __property   short           Initialized = {read = get_Initialized, write = set_Initialized};
  __property   long            Pitch = {read = get_Pitch, write = set_Pitch};
  __property   long            MaxPitch = {read = get_MaxPitch, write = set_MaxPitch};
  __property   long            MinPitch = {read = get_MinPitch, write = set_MinPitch};
  __property   long            Speed = {read = get_Speed, write = set_Speed};
  __property   long            MaxSpeed = {read = get_MaxSpeed, write = set_MaxSpeed};
  __property   long            MinSpeed = {read = get_MinSpeed, write = set_MinSpeed};
  __property   long            VolumeRight = {read = get_VolumeRight, write = set_VolumeRight};
  __property   long            MinVolumeRight = {read = get_MinVolumeRight, write = set_MinVolumeRight};
  __property   long            MaxVolumeRight = {read = get_MaxVolumeRight, write = set_MaxVolumeRight};
  __property   long            CountEngines = {read = get_CountEngines};
  __property   long            RealTime = {read = get_RealTime, write = set_RealTime};
  __property   long            MaxRealTime = {read = get_MaxRealTime};
  __property   long            MinRealTime = {read = get_MinRealTime, write = set_MinRealTime};
  __property   long            Tagged = {read = get_Tagged, write = set_Tagged};
  __property   short           MouthHeight = {read = get_MouthHeight, write = set_MouthHeight};
  __property   short           MouthWidth = {read = get_MouthWidth, write = set_MouthWidth};
  __property   short           MouthUpturn = {read = get_MouthUpturn, write = set_MouthUpturn};
  __property   short           JawOpen = {read = get_JawOpen, write = set_JawOpen};
  __property   short           TeethUpperVisible = {read = get_TeethUpperVisible, write = set_TeethUpperVisible};
  __property   short           TeethLowerVisible = {read = get_TeethLowerVisible, write = set_TeethLowerVisible};
  __property   short           TonguePosn = {read = get_TonguePosn, write = set_TonguePosn};
  __property   short           LipTension = {read = get_LipTension, write = set_LipTension};
  __property   short           CallBacksEnabled = {read = get_CallBacksEnabled, write = set_CallBacksEnabled};
  __property   short           MouthEnabled = {read = get_MouthEnabled, write = set_MouthEnabled};
  __property   long            LastError = {read = get_LastError, write = set_LastError};
  __property   short           SuppressExceptions = {read = get_SuppressExceptions, write = set_SuppressExceptions};
  __property   short           Speaking = {read = get_Speaking, write = set_Speaking};
  __property   long            LastWordPosition = {read = get_LastWordPosition, write = set_LastWordPosition};
  __property   short           LipType = {read = get_LipType, write = set_LipType};
  __property   BSTR            Sayit = {read = get_Sayit, write = set_Sayit};
  __property   BSTR            FileName = {read = get_FileName, write = set_FileName};
  __property   long            CurrentMode = {read = get_CurrentMode, write = set_CurrentMode};
  __property   long            hWnd = {read = get_hWnd};
  __property   long            VolumeLeft = {read = get_VolumeLeft, write = set_VolumeLeft};
  __property   long            MinVolumeLeft = {read = get_MinVolumeLeft, write = set_MinVolumeLeft};
  __property   long            MaxVolumeLeft = {read = get_MaxVolumeLeft, write = set_MaxVolumeLeft};
  __property   long            AudioDest = {read = get_AudioDest};
};
typedef TCOMIDirectSST<IDirectSS> TCOMIDirectSS;

// *********************************************************************//
// DispIntf:  IDirectSS
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EEE78590-FE22-11D0-8BEF-0060081841DE}
// *********************************************************************//
template<class T>
class IDirectSSDispT : public TAutoDriver<IDirectSS>
{
public:
  IDirectSSDispT(){}

  IDirectSSDispT(IDirectSS *pintf)
  {
    TAutoDriver<IDirectSS>::Bind(pintf, false);
  }

  IDirectSSDispT(IDirectSSPtr pintf)
  {
    TAutoDriver<IDirectSS>::Bind(pintf, true);
  }

  IDirectSSDispT& operator=(IDirectSS *pintf)
  {
    TAutoDriver<IDirectSS>::Bind(pintf, false);
    return *this;
  }

  IDirectSSDispT& operator=(IDirectSSPtr pintf)
  {
    TAutoDriver<IDirectSS>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DirectSS));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DirectSS);
  }

  HRESULT         __fastcall get_debug(short* pVal/*[out,retval]*/);
  short           __fastcall get_debug(void);
  HRESULT         __fastcall set_debug(short pVal/*[in]*/);
  HRESULT         __fastcall get_Initialized(short* pVal/*[out,retval]*/);
  short           __fastcall get_Initialized(void);
  HRESULT         __fastcall set_Initialized(short pVal/*[in]*/);
  HRESULT         __fastcall Speak(BSTR text);
  HRESULT         __fastcall get_Pitch(long* pVal/*[out,retval]*/);
  long            __fastcall get_Pitch(void);
  HRESULT         __fastcall set_Pitch(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxPitch(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxPitch(void);
  HRESULT         __fastcall set_MaxPitch(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinPitch(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinPitch(void);
  HRESULT         __fastcall set_MinPitch(long pVal/*[in]*/);
  HRESULT         __fastcall get_Speed(long* pVal/*[out,retval]*/);
  long            __fastcall get_Speed(void);
  HRESULT         __fastcall set_Speed(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxSpeed(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxSpeed(void);
  HRESULT         __fastcall set_MaxSpeed(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinSpeed(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinSpeed(void);
  HRESULT         __fastcall set_MinSpeed(long pVal/*[in]*/);
  HRESULT         __fastcall get_VolumeRight(long* pVal/*[out,retval]*/);
  long            __fastcall get_VolumeRight(void);
  HRESULT         __fastcall set_VolumeRight(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinVolumeRight(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinVolumeRight(void);
  HRESULT         __fastcall set_MinVolumeRight(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxVolumeRight(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxVolumeRight(void);
  HRESULT         __fastcall set_MaxVolumeRight(long pVal/*[in]*/);
  HRESULT         __fastcall Select(int index);
  HRESULT         __fastcall EngineID(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall EngineID(int index);
  HRESULT         __fastcall get_CountEngines(long* pVal/*[out,retval]*/);
  long            __fastcall get_CountEngines(void);
  HRESULT         __fastcall ModeName(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ModeName(int index);
  HRESULT         __fastcall MfgName(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall MfgName(int index);
  HRESULT         __fastcall ProductName(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ProductName(int index);
  HRESULT         __fastcall ModeID(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall ModeID(int index);
  HRESULT         __fastcall Speaker(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall Speaker(int index);
  HRESULT         __fastcall Style(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall Style(int index);
  HRESULT         __fastcall Gender(int index, long* Gender/*[out,retval]*/);
  long            __fastcall Gender(int index);
  HRESULT         __fastcall Age(int index, long* pVal/*[out,retval]*/);
  long            __fastcall Age(int index);
  HRESULT         __fastcall Features(int index, long* pVal/*[out,retval]*/);
  long            __fastcall Features(int index);
  HRESULT         __fastcall Interfaces(int index, long* pVal/*[out,retval]*/);
  long            __fastcall Interfaces(int index);
  HRESULT         __fastcall EngineFeatures(int index, long* pVal/*[out,retval]*/);
  long            __fastcall EngineFeatures(int index);
  HRESULT         __fastcall LanguageID(int index, long* pVal/*[out,retval]*/);
  long            __fastcall LanguageID(int index);
  HRESULT         __fastcall Dialect(int index, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall Dialect(int index);
  HRESULT         __fastcall get_RealTime(long* pVal/*[out,retval]*/);
  long            __fastcall get_RealTime(void);
  HRESULT         __fastcall set_RealTime(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxRealTime(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxRealTime(void);
  HRESULT         __fastcall get_MinRealTime(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinRealTime(void);
  HRESULT         __fastcall set_MinRealTime(long pVal/*[in]*/);
  HRESULT         __fastcall AudioPause();
  HRESULT         __fastcall AudioReset();
  HRESULT         __fastcall AudioResume();
  HRESULT         __fastcall Inject(BSTR value);
  HRESULT         __fastcall get_Tagged(long* pVal/*[out,retval]*/);
  long            __fastcall get_Tagged(void);
  HRESULT         __fastcall set_Tagged(long pVal/*[in]*/);
  HRESULT         __fastcall Phonemes(long charset, long Flags, BSTR input, 
                                      BSTR* output/*[out,retval]*/);
  BSTR            __fastcall Phonemes(long charset, long Flags, BSTR input);
  HRESULT         __fastcall PosnGet(long* hi, long* lo);
  HRESULT         __fastcall TextData(long characterset, long Flags, BSTR text);
  HRESULT         __fastcall InitAudioDestMM(long deviceid);
  HRESULT         __fastcall AboutDlg(long hWnd, BSTR title);
  HRESULT         __fastcall GeneralDlg(long hWnd, BSTR title);
  HRESULT         __fastcall LexiconDlg(long hWnd, BSTR title);
  HRESULT         __fastcall TranslateDlg(long hWnd, BSTR title);
  HRESULT         __fastcall FindEngine(BSTR EngineID, BSTR MfgName, BSTR ProductName, BSTR ModeID, 
                                        BSTR ModeName, long LanguageID, BSTR Dialect, BSTR Speaker, 
                                        BSTR Style, long Gender, long Age, long Features, 
                                        long Interfaces, long EngineFeatures, long RankEngineID, 
                                        long RankMfgName, long RankProductName, long RankModeID, 
                                        long RankModeName, long RankLanguage, long RankDialect, 
                                        long RankSpeaker, long RankStyle, long RankGender, 
                                        long RankAge, long RankFeatures, long RankInterfaces, 
                                        long RankEngineFeatures, long* index/*[out,retval]*/);
  long            __fastcall FindEngine(BSTR EngineID, BSTR MfgName, BSTR ProductName, BSTR ModeID, 
                                        BSTR ModeName, long LanguageID, BSTR Dialect, BSTR Speaker, 
                                        BSTR Style, long Gender, long Age, long Features, 
                                        long Interfaces, long EngineFeatures, long RankEngineID, 
                                        long RankMfgName, long RankProductName, long RankModeID, 
                                        long RankModeName, long RankLanguage, long RankDialect, 
                                        long RankSpeaker, long RankStyle, long RankGender, 
                                        long RankAge, long RankFeatures, long RankInterfaces, 
                                        long RankEngineFeatures);
  HRESULT         __fastcall get_MouthHeight(short* pVal/*[out,retval]*/);
  short           __fastcall get_MouthHeight(void);
  HRESULT         __fastcall set_MouthHeight(short pVal/*[in]*/);
  HRESULT         __fastcall get_MouthWidth(short* pVal/*[out,retval]*/);
  short           __fastcall get_MouthWidth(void);
  HRESULT         __fastcall set_MouthWidth(short pVal/*[in]*/);
  HRESULT         __fastcall get_MouthUpturn(short* pVal/*[out,retval]*/);
  short           __fastcall get_MouthUpturn(void);
  HRESULT         __fastcall set_MouthUpturn(short pVal/*[in]*/);
  HRESULT         __fastcall get_JawOpen(short* pVal/*[out,retval]*/);
  short           __fastcall get_JawOpen(void);
  HRESULT         __fastcall set_JawOpen(short pVal/*[in]*/);
  HRESULT         __fastcall get_TeethUpperVisible(short* pVal/*[out,retval]*/);
  short           __fastcall get_TeethUpperVisible(void);
  HRESULT         __fastcall set_TeethUpperVisible(short pVal/*[in]*/);
  HRESULT         __fastcall get_TeethLowerVisible(short* pVal/*[out,retval]*/);
  short           __fastcall get_TeethLowerVisible(void);
  HRESULT         __fastcall set_TeethLowerVisible(short pVal/*[in]*/);
  HRESULT         __fastcall get_TonguePosn(short* pVal/*[out,retval]*/);
  short           __fastcall get_TonguePosn(void);
  HRESULT         __fastcall set_TonguePosn(short pVal/*[in]*/);
  HRESULT         __fastcall get_LipTension(short* pVal/*[out,retval]*/);
  short           __fastcall get_LipTension(void);
  HRESULT         __fastcall set_LipTension(short pVal/*[in]*/);
  HRESULT         __fastcall get_CallBacksEnabled(short* pVal/*[out,retval]*/);
  short           __fastcall get_CallBacksEnabled(void);
  HRESULT         __fastcall set_CallBacksEnabled(short pVal/*[in]*/);
  HRESULT         __fastcall get_MouthEnabled(short* pVal/*[out,retval]*/);
  short           __fastcall get_MouthEnabled(void);
  HRESULT         __fastcall set_MouthEnabled(short pVal/*[in]*/);
  HRESULT         __fastcall get_LastError(long* pVal/*[out,retval]*/);
  long            __fastcall get_LastError(void);
  HRESULT         __fastcall set_LastError(long pVal/*[in]*/);
  HRESULT         __fastcall get_SuppressExceptions(short* pVal/*[out,retval]*/);
  short           __fastcall get_SuppressExceptions(void);
  HRESULT         __fastcall set_SuppressExceptions(short pVal/*[in]*/);
  HRESULT         __fastcall get_Speaking(short* pVal/*[out,retval]*/);
  short           __fastcall get_Speaking(void);
  HRESULT         __fastcall set_Speaking(short pVal/*[in]*/);
  HRESULT         __fastcall get_LastWordPosition(long* pVal/*[out,retval]*/);
  long            __fastcall get_LastWordPosition(void);
  HRESULT         __fastcall set_LastWordPosition(long pVal/*[in]*/);
  HRESULT         __fastcall get_LipType(short* pVal/*[out,retval]*/);
  short           __fastcall get_LipType(void);
  HRESULT         __fastcall set_LipType(short pVal/*[in]*/);
  HRESULT         __fastcall GetPronunciation(long charset, BSTR text, long Sense, BSTR* Pronounce, 
                                              long* PartOfSpeech, BSTR* EngineInfo);
  HRESULT         __fastcall InitAudioDestDirect(long direct);
  HRESULT         __fastcall get_Sayit(BSTR* newVal/*[out,retval]*/);
  BSTR            __fastcall get_Sayit(void);
  HRESULT         __fastcall set_Sayit(BSTR newVal/*[in]*/);
  HRESULT         __fastcall InitAudioDestObject(long object);
  HRESULT         __fastcall get_FileName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT         __fastcall set_FileName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CurrentMode(long* pVal/*[out,retval]*/);
  long            __fastcall get_CurrentMode(void);
  HRESULT         __fastcall set_CurrentMode(long pVal/*[in]*/);
  HRESULT         __fastcall get_hWnd(long* pVal/*[out,retval]*/);
  long            __fastcall get_hWnd(void);
  HRESULT         __fastcall Find(BSTR RankList, long* index/*[out,retval]*/);
  long            __fastcall Find(BSTR RankList);
  HRESULT         __fastcall get_VolumeLeft(long* pVal/*[out,retval]*/);
  long            __fastcall get_VolumeLeft(void);
  HRESULT         __fastcall set_VolumeLeft(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinVolumeLeft(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinVolumeLeft(void);
  HRESULT         __fastcall set_MinVolumeLeft(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxVolumeLeft(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxVolumeLeft(void);
  HRESULT         __fastcall set_MaxVolumeLeft(long pVal/*[in]*/);
  HRESULT         __fastcall get_AudioDest(long* pVal/*[out,retval]*/);
  long            __fastcall get_AudioDest(void);
  HRESULT         __fastcall get_Attributes(long Attrib, long* pVal/*[out,retval]*/);
  long            __fastcall get_Attributes(long Attrib);
  HRESULT         __fastcall set_Attributes(long Attrib, long pVal/*[in]*/);
  HRESULT         __fastcall get_AttributeString(long Attrib, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AttributeString(long Attrib);
  HRESULT         __fastcall set_AttributeString(long Attrib, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AttributeMemory(long Attrib, long* size, long* pVal/*[out,retval]*/);
  long            __fastcall get_AttributeMemory(long Attrib, long* size);
  HRESULT         __fastcall set_AttributeMemory(long Attrib, long* size, long pVal/*[in]*/);
  HRESULT         __fastcall LexAddTo(unsigned_long lex, long charset, BSTR text, BSTR Pronounce, 
                                      long PartOfSpeech, long EngineInfo, long engineinfosize);
  HRESULT         __fastcall LexGetFrom(long lex, long charset, BSTR text, long Sense, 
                                        BSTR* Pronounce, long* PartOfSpeech, long* EngineInfo, 
                                        long* sizeofengineinfo);
  HRESULT         __fastcall LexRemoveFrom(long lex, BSTR text, long Sense);
  HRESULT         __fastcall QueryLexicons(long f, long* pdw);
  HRESULT         __fastcall ChangeSpelling(long lex, BSTR stringa, BSTR stringb);

  __property   short           debug = {read = get_debug, write = set_debug};
  __property   short           Initialized = {read = get_Initialized, write = set_Initialized};
  __property   long            Pitch = {read = get_Pitch, write = set_Pitch};
  __property   long            MaxPitch = {read = get_MaxPitch, write = set_MaxPitch};
  __property   long            MinPitch = {read = get_MinPitch, write = set_MinPitch};
  __property   long            Speed = {read = get_Speed, write = set_Speed};
  __property   long            MaxSpeed = {read = get_MaxSpeed, write = set_MaxSpeed};
  __property   long            MinSpeed = {read = get_MinSpeed, write = set_MinSpeed};
  __property   long            VolumeRight = {read = get_VolumeRight, write = set_VolumeRight};
  __property   long            MinVolumeRight = {read = get_MinVolumeRight, write = set_MinVolumeRight};
  __property   long            MaxVolumeRight = {read = get_MaxVolumeRight, write = set_MaxVolumeRight};
  __property   long            CountEngines = {read = get_CountEngines};
  __property   long            RealTime = {read = get_RealTime, write = set_RealTime};
  __property   long            MaxRealTime = {read = get_MaxRealTime};
  __property   long            MinRealTime = {read = get_MinRealTime, write = set_MinRealTime};
  __property   long            Tagged = {read = get_Tagged, write = set_Tagged};
  __property   short           MouthHeight = {read = get_MouthHeight, write = set_MouthHeight};
  __property   short           MouthWidth = {read = get_MouthWidth, write = set_MouthWidth};
  __property   short           MouthUpturn = {read = get_MouthUpturn, write = set_MouthUpturn};
  __property   short           JawOpen = {read = get_JawOpen, write = set_JawOpen};
  __property   short           TeethUpperVisible = {read = get_TeethUpperVisible, write = set_TeethUpperVisible};
  __property   short           TeethLowerVisible = {read = get_TeethLowerVisible, write = set_TeethLowerVisible};
  __property   short           TonguePosn = {read = get_TonguePosn, write = set_TonguePosn};
  __property   short           LipTension = {read = get_LipTension, write = set_LipTension};
  __property   short           CallBacksEnabled = {read = get_CallBacksEnabled, write = set_CallBacksEnabled};
  __property   short           MouthEnabled = {read = get_MouthEnabled, write = set_MouthEnabled};
  __property   long            LastError = {read = get_LastError, write = set_LastError};
  __property   short           SuppressExceptions = {read = get_SuppressExceptions, write = set_SuppressExceptions};
  __property   short           Speaking = {read = get_Speaking, write = set_Speaking};
  __property   long            LastWordPosition = {read = get_LastWordPosition, write = set_LastWordPosition};
  __property   short           LipType = {read = get_LipType, write = set_LipType};
  __property   BSTR            Sayit = {read = get_Sayit, write = set_Sayit};
  __property   BSTR            FileName = {read = get_FileName, write = set_FileName};
  __property   long            CurrentMode = {read = get_CurrentMode, write = set_CurrentMode};
  __property   long            hWnd = {read = get_hWnd};
  __property   long            VolumeLeft = {read = get_VolumeLeft, write = set_VolumeLeft};
  __property   long            MinVolumeLeft = {read = get_MinVolumeLeft, write = set_MinVolumeLeft};
  __property   long            MaxVolumeLeft = {read = get_MaxVolumeLeft, write = set_MaxVolumeLeft};
  __property   long            AudioDest = {read = get_AudioDest};
};
typedef IDirectSSDispT<IDirectSS> IDirectSSDisp;

// *********************************************************************//
// DispIntf:  _DirectSSEvents
// Flags:     (4096) Dispatchable
// GUID:      {EEE78597-FE22-11D0-8BEF-0060081841DE}
// *********************************************************************//
template <class T> void __fastcall
_DirectSSEventsDispT<T>::ClickIn(long x/*[in]*/, long y/*[in]*/)
{
  _TDispID _dispid(/* ClickIn */ DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DirectSSEventsDispT<T>::ClickOut(long x/*[in]*/, long y/*[in]*/)
{
  _TDispID _dispid(/* ClickOut */ DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DirectSSEventsDispT<T>::AudioStart(long hi/*[in]*/, long lo/*[in]*/)
{
  _TDispID _dispid(/* AudioStart */ DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = hi /*[VT_I4:0]*/;
  _args[2] = lo /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DirectSSEventsDispT<T>::AudioStop(long hi/*[in]*/, long lo/*[in]*/)
{
  _TDispID _dispid(/* AudioStop */ DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = hi /*[VT_I4:0]*/;
  _args[2] = lo /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> HRESULT __fastcall
_DirectSSEventsDispT<T>::AttribChanged(long which_attribute)
{
  _TDispID _dispid(/* AttribChanged */ DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = which_attribute /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_DirectSSEventsDispT<T>::Visual(long timehi, long timelo, short Phoneme, short EnginePhoneme, 
                                long hints, short MouthHeight, short bMouthWidth, short bMouthUpturn
                                , short bJawOpen, short TeethUpperVisible, short TeethLowerVisible, 
                                short TonguePosn, short LipTension)
{
  _TDispID _dispid(/* Visual */ DISPID(6));
  TAutoArgs<13> _args;
  _args[1] = timehi /*[VT_I4:0]*/;
  _args[2] = timelo /*[VT_I4:0]*/;
  _args[3] = Phoneme /*[VT_I2:0]*/;
  _args[4] = EnginePhoneme /*[VT_I2:0]*/;
  _args[5] = hints /*[VT_I4:0]*/;
  _args[6] = MouthHeight /*[VT_I2:0]*/;
  _args[7] = bMouthWidth /*[VT_I2:0]*/;
  _args[8] = bMouthUpturn /*[VT_I2:0]*/;
  _args[9] = bJawOpen /*[VT_I2:0]*/;
  _args[10] = TeethUpperVisible /*[VT_I2:0]*/;
  _args[11] = TeethLowerVisible /*[VT_I2:0]*/;
  _args[12] = TonguePosn /*[VT_I2:0]*/;
  _args[13] = LipTension /*[VT_I2:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_DirectSSEventsDispT<T>::WordPosition(long hi, long lo, long byteoffset)
{
  _TDispID _dispid(/* WordPosition */ DISPID(7));
  TAutoArgs<3> _args;
  _args[1] = hi /*[VT_I4:0]*/;
  _args[2] = lo /*[VT_I4:0]*/;
  _args[3] = byteoffset /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_DirectSSEventsDispT<T>::BookMark(long hi, long lo, long MarkNum)
{
  _TDispID _dispid(/* BookMark */ DISPID(8));
  TAutoArgs<3> _args;
  _args[1] = hi /*[VT_I4:0]*/;
  _args[2] = lo /*[VT_I4:0]*/;
  _args[3] = MarkNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_DirectSSEventsDispT<T>::TextDataStarted(long hi, long lo)
{
  _TDispID _dispid(/* TextDataStarted */ DISPID(9));
  TAutoArgs<2> _args;
  _args[1] = hi /*[VT_I4:0]*/;
  _args[2] = lo /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_DirectSSEventsDispT<T>::TextDataDone(long hi, long lo, long Flags)
{
  _TDispID _dispid(/* TextDataDone */ DISPID(10));
  TAutoArgs<3> _args;
  _args[1] = hi /*[VT_I4:0]*/;
  _args[2] = lo /*[VT_I4:0]*/;
  _args[3] = Flags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_DirectSSEventsDispT<T>::ActiveVoiceStartup(long init, long init2)
{
  _TDispID _dispid(/* ActiveVoiceStartup */ DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = init /*[VT_I4:0]*/;
  _args[2] = init2 /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_DirectSSEventsDispT<T>::Debugging()
{
  _TDispID _dispid(/* Debugging */ DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_DirectSSEventsDispT<T>::Error(unsigned_long warning, BSTR Details, BSTR Message)
{
  _TDispID _dispid(/* Error */ DISPID(13));
  TAutoArgs<3> _args;
  _args[1] = warning /*[VT_UI4:0]*/;
  _args[2] = Details /*[VT_BSTR:0]*/;
  _args[3] = Message /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_DirectSSEventsDispT<T>::warning(unsigned_long warning, BSTR Details, BSTR Message)
{
  _TDispID _dispid(/* warning */ DISPID(14));
  TAutoArgs<3> _args;
  _args[1] = warning /*[VT_UI4:0]*/;
  _args[2] = Details /*[VT_BSTR:0]*/;
  _args[3] = Message /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_DirectSSEventsDispT<T>::VisualFuture(long milliseconds, long timehi, long timelo, short Phoneme, 
                                      short EnginePhoneme, long hints, short MouthHeight, 
                                      short bMouthWidth, short bMouthUpturn, short bJawOpen, 
                                      short TeethUpperVisible, short TeethLowerVisible, 
                                      short TonguePosn, short LipTension)
{
  _TDispID _dispid(/* VisualFuture */ DISPID(15));
  TAutoArgs<14> _args;
  _args[1] = milliseconds /*[VT_I4:0]*/;
  _args[2] = timehi /*[VT_I4:0]*/;
  _args[3] = timelo /*[VT_I4:0]*/;
  _args[4] = Phoneme /*[VT_I2:0]*/;
  _args[5] = EnginePhoneme /*[VT_I2:0]*/;
  _args[6] = hints /*[VT_I4:0]*/;
  _args[7] = MouthHeight /*[VT_I2:0]*/;
  _args[8] = bMouthWidth /*[VT_I2:0]*/;
  _args[9] = bMouthUpturn /*[VT_I2:0]*/;
  _args[10] = bJawOpen /*[VT_I2:0]*/;
  _args[11] = TeethUpperVisible /*[VT_I2:0]*/;
  _args[12] = TeethLowerVisible /*[VT_I2:0]*/;
  _args[13] = TonguePosn /*[VT_I2:0]*/;
  _args[14] = LipTension /*[VT_I2:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIDirectSS
// Interface: IDirectSS
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_debug(short* pVal/*[out,retval]*/)
{
  return (*this)->get_debug(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_debug(void)
{
  short pVal;
  OLECHECK(this->get_debug((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_debug(short pVal/*[in]*/)
{
  return (*this)->set_debug(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_Initialized(short* pVal/*[out,retval]*/)
{
  return (*this)->get_Initialized(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_Initialized(void)
{
  short pVal;
  OLECHECK(this->get_Initialized((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_Initialized(short pVal/*[in]*/)
{
  return (*this)->set_Initialized(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::Speak(BSTR text)
{
  return (*this)->Speak(text);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_Pitch(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Pitch(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_Pitch(void)
{
  long pVal;
  OLECHECK(this->get_Pitch((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_Pitch(long pVal/*[in]*/)
{
  return (*this)->set_Pitch(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MaxPitch(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MaxPitch(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_MaxPitch(void)
{
  long pVal;
  OLECHECK(this->get_MaxPitch((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MaxPitch(long pVal/*[in]*/)
{
  return (*this)->set_MaxPitch(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MinPitch(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MinPitch(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_MinPitch(void)
{
  long pVal;
  OLECHECK(this->get_MinPitch((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MinPitch(long pVal/*[in]*/)
{
  return (*this)->set_MinPitch(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_Speed(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Speed(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_Speed(void)
{
  long pVal;
  OLECHECK(this->get_Speed((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_Speed(long pVal/*[in]*/)
{
  return (*this)->set_Speed(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MaxSpeed(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MaxSpeed(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_MaxSpeed(void)
{
  long pVal;
  OLECHECK(this->get_MaxSpeed((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MaxSpeed(long pVal/*[in]*/)
{
  return (*this)->set_MaxSpeed(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MinSpeed(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MinSpeed(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_MinSpeed(void)
{
  long pVal;
  OLECHECK(this->get_MinSpeed((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MinSpeed(long pVal/*[in]*/)
{
  return (*this)->set_MinSpeed(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_VolumeRight(long* pVal/*[out,retval]*/)
{
  return (*this)->get_VolumeRight(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_VolumeRight(void)
{
  long pVal;
  OLECHECK(this->get_VolumeRight((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_VolumeRight(long pVal/*[in]*/)
{
  return (*this)->set_VolumeRight(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MinVolumeRight(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MinVolumeRight(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_MinVolumeRight(void)
{
  long pVal;
  OLECHECK(this->get_MinVolumeRight((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MinVolumeRight(long pVal/*[in]*/)
{
  return (*this)->set_MinVolumeRight(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MaxVolumeRight(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MaxVolumeRight(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_MaxVolumeRight(void)
{
  long pVal;
  OLECHECK(this->get_MaxVolumeRight((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MaxVolumeRight(long pVal/*[in]*/)
{
  return (*this)->set_MaxVolumeRight(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::Select(int index)
{
  return (*this)->Select(index);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::EngineID(int index, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->EngineID(index, pVal);
}

template <class T> BSTR __fastcall
TCOMIDirectSST<T>::EngineID(int index)
{
  BSTR pVal = 0;
  OLECHECK(this->EngineID(index, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_CountEngines(long* pVal/*[out,retval]*/)
{
  return (*this)->get_CountEngines(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_CountEngines(void)
{
  long pVal;
  OLECHECK(this->get_CountEngines((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::ModeName(int index, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->ModeName(index, pVal);
}

template <class T> BSTR __fastcall
TCOMIDirectSST<T>::ModeName(int index)
{
  BSTR pVal = 0;
  OLECHECK(this->ModeName(index, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::MfgName(int index, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->MfgName(index, pVal);
}

template <class T> BSTR __fastcall
TCOMIDirectSST<T>::MfgName(int index)
{
  BSTR pVal = 0;
  OLECHECK(this->MfgName(index, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::ProductName(int index, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->ProductName(index, pVal);
}

template <class T> BSTR __fastcall
TCOMIDirectSST<T>::ProductName(int index)
{
  BSTR pVal = 0;
  OLECHECK(this->ProductName(index, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::ModeID(int index, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->ModeID(index, pVal);
}

template <class T> BSTR __fastcall
TCOMIDirectSST<T>::ModeID(int index)
{
  BSTR pVal = 0;
  OLECHECK(this->ModeID(index, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::Speaker(int index, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->Speaker(index, pVal);
}

template <class T> BSTR __fastcall
TCOMIDirectSST<T>::Speaker(int index)
{
  BSTR pVal = 0;
  OLECHECK(this->Speaker(index, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::Style(int index, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->Style(index, pVal);
}

template <class T> BSTR __fastcall
TCOMIDirectSST<T>::Style(int index)
{
  BSTR pVal = 0;
  OLECHECK(this->Style(index, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::Gender(int index, long* Gender/*[out,retval]*/)
{
  return (*this)->Gender(index, Gender);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::Gender(int index)
{
  long Gender;
  OLECHECK(this->Gender(index, (long*)&Gender));
  return Gender;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::Age(int index, long* pVal/*[out,retval]*/)
{
  return (*this)->Age(index, pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::Age(int index)
{
  long pVal;
  OLECHECK(this->Age(index, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::Features(int index, long* pVal/*[out,retval]*/)
{
  return (*this)->Features(index, pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::Features(int index)
{
  long pVal;
  OLECHECK(this->Features(index, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::Interfaces(int index, long* pVal/*[out,retval]*/)
{
  return (*this)->Interfaces(index, pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::Interfaces(int index)
{
  long pVal;
  OLECHECK(this->Interfaces(index, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::EngineFeatures(int index, long* pVal/*[out,retval]*/)
{
  return (*this)->EngineFeatures(index, pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::EngineFeatures(int index)
{
  long pVal;
  OLECHECK(this->EngineFeatures(index, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::LanguageID(int index, long* pVal/*[out,retval]*/)
{
  return (*this)->LanguageID(index, pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::LanguageID(int index)
{
  long pVal;
  OLECHECK(this->LanguageID(index, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::Dialect(int index, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->Dialect(index, pVal);
}

template <class T> BSTR __fastcall
TCOMIDirectSST<T>::Dialect(int index)
{
  BSTR pVal = 0;
  OLECHECK(this->Dialect(index, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_RealTime(long* pVal/*[out,retval]*/)
{
  return (*this)->get_RealTime(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_RealTime(void)
{
  long pVal;
  OLECHECK(this->get_RealTime((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_RealTime(long pVal/*[in]*/)
{
  return (*this)->set_RealTime(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MaxRealTime(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MaxRealTime(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_MaxRealTime(void)
{
  long pVal;
  OLECHECK(this->get_MaxRealTime((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MinRealTime(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MinRealTime(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_MinRealTime(void)
{
  long pVal;
  OLECHECK(this->get_MinRealTime((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MinRealTime(long pVal/*[in]*/)
{
  return (*this)->set_MinRealTime(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::AudioPause(void)
{
  return (*this)->AudioPause();
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::AudioReset(void)
{
  return (*this)->AudioReset();
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::AudioResume(void)
{
  return (*this)->AudioResume();
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::Inject(BSTR value)
{
  return (*this)->Inject(value);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_Tagged(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Tagged(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_Tagged(void)
{
  long pVal;
  OLECHECK(this->get_Tagged((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_Tagged(long pVal/*[in]*/)
{
  return (*this)->set_Tagged(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::Phonemes(long charset, long Flags, BSTR input, BSTR* output/*[out,retval]*/)
{
  return (*this)->Phonemes(charset, Flags, input, output);
}

template <class T> BSTR __fastcall
TCOMIDirectSST<T>::Phonemes(long charset, long Flags, BSTR input)
{
  BSTR output = 0;
  OLECHECK(this->Phonemes(charset, Flags, input, (BSTR*)&output));
  return output;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::PosnGet(long* hi, long* lo)
{
  return (*this)->PosnGet(hi, lo);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::TextData(long characterset, long Flags, BSTR text)
{
  return (*this)->TextData(characterset, Flags, text);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::InitAudioDestMM(long deviceid)
{
  return (*this)->InitAudioDestMM(deviceid);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::AboutDlg(long hWnd, BSTR title)
{
  return (*this)->AboutDlg(hWnd, title);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::GeneralDlg(long hWnd, BSTR title)
{
  return (*this)->GeneralDlg(hWnd, title);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::LexiconDlg(long hWnd, BSTR title)
{
  return (*this)->LexiconDlg(hWnd, title);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::TranslateDlg(long hWnd, BSTR title)
{
  return (*this)->TranslateDlg(hWnd, title);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::FindEngine(BSTR EngineID, BSTR MfgName, BSTR ProductName, BSTR ModeID, 
                              BSTR ModeName, long LanguageID, BSTR Dialect, BSTR Speaker, BSTR Style, 
                              long Gender, long Age, long Features, long Interfaces, 
                              long EngineFeatures, long RankEngineID, long RankMfgName, 
                              long RankProductName, long RankModeID, long RankModeName, 
                              long RankLanguage, long RankDialect, long RankSpeaker, long RankStyle, 
                              long RankGender, long RankAge, long RankFeatures, long RankInterfaces, 
                              long RankEngineFeatures, long* index/*[out,retval]*/)
{
  return (*this)->FindEngine(EngineID, MfgName, ProductName, ModeID, ModeName, LanguageID, Dialect, 
                             Speaker, Style, Gender, Age, Features, Interfaces, EngineFeatures, 
                             RankEngineID, RankMfgName, RankProductName, RankModeID, RankModeName, 
                             RankLanguage, RankDialect, RankSpeaker, RankStyle, RankGender, RankAge, 
                             RankFeatures, RankInterfaces, RankEngineFeatures, index);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::FindEngine(BSTR EngineID, BSTR MfgName, BSTR ProductName, BSTR ModeID, 
                              BSTR ModeName, long LanguageID, BSTR Dialect, BSTR Speaker, BSTR Style, 
                              long Gender, long Age, long Features, long Interfaces, 
                              long EngineFeatures, long RankEngineID, long RankMfgName, 
                              long RankProductName, long RankModeID, long RankModeName, 
                              long RankLanguage, long RankDialect, long RankSpeaker, long RankStyle, 
                              long RankGender, long RankAge, long RankFeatures, long RankInterfaces, 
                              long RankEngineFeatures)
{
  long index;
  OLECHECK(this->FindEngine(EngineID, MfgName, ProductName, ModeID, ModeName, LanguageID, Dialect, 
                            Speaker, Style, Gender, Age, Features, Interfaces, EngineFeatures, 
                            RankEngineID, RankMfgName, RankProductName, RankModeID, RankModeName, 
                            RankLanguage, RankDialect, RankSpeaker, RankStyle, RankGender, RankAge, 
                            RankFeatures, RankInterfaces, RankEngineFeatures, (long*)&index));
  return index;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MouthHeight(short* pVal/*[out,retval]*/)
{
  return (*this)->get_MouthHeight(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_MouthHeight(void)
{
  short pVal;
  OLECHECK(this->get_MouthHeight((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MouthHeight(short pVal/*[in]*/)
{
  return (*this)->set_MouthHeight(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MouthWidth(short* pVal/*[out,retval]*/)
{
  return (*this)->get_MouthWidth(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_MouthWidth(void)
{
  short pVal;
  OLECHECK(this->get_MouthWidth((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MouthWidth(short pVal/*[in]*/)
{
  return (*this)->set_MouthWidth(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MouthUpturn(short* pVal/*[out,retval]*/)
{
  return (*this)->get_MouthUpturn(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_MouthUpturn(void)
{
  short pVal;
  OLECHECK(this->get_MouthUpturn((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MouthUpturn(short pVal/*[in]*/)
{
  return (*this)->set_MouthUpturn(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_JawOpen(short* pVal/*[out,retval]*/)
{
  return (*this)->get_JawOpen(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_JawOpen(void)
{
  short pVal;
  OLECHECK(this->get_JawOpen((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_JawOpen(short pVal/*[in]*/)
{
  return (*this)->set_JawOpen(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_TeethUpperVisible(short* pVal/*[out,retval]*/)
{
  return (*this)->get_TeethUpperVisible(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_TeethUpperVisible(void)
{
  short pVal;
  OLECHECK(this->get_TeethUpperVisible((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_TeethUpperVisible(short pVal/*[in]*/)
{
  return (*this)->set_TeethUpperVisible(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_TeethLowerVisible(short* pVal/*[out,retval]*/)
{
  return (*this)->get_TeethLowerVisible(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_TeethLowerVisible(void)
{
  short pVal;
  OLECHECK(this->get_TeethLowerVisible((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_TeethLowerVisible(short pVal/*[in]*/)
{
  return (*this)->set_TeethLowerVisible(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_TonguePosn(short* pVal/*[out,retval]*/)
{
  return (*this)->get_TonguePosn(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_TonguePosn(void)
{
  short pVal;
  OLECHECK(this->get_TonguePosn((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_TonguePosn(short pVal/*[in]*/)
{
  return (*this)->set_TonguePosn(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_LipTension(short* pVal/*[out,retval]*/)
{
  return (*this)->get_LipTension(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_LipTension(void)
{
  short pVal;
  OLECHECK(this->get_LipTension((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_LipTension(short pVal/*[in]*/)
{
  return (*this)->set_LipTension(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_CallBacksEnabled(short* pVal/*[out,retval]*/)
{
  return (*this)->get_CallBacksEnabled(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_CallBacksEnabled(void)
{
  short pVal;
  OLECHECK(this->get_CallBacksEnabled((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_CallBacksEnabled(short pVal/*[in]*/)
{
  return (*this)->set_CallBacksEnabled(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MouthEnabled(short* pVal/*[out,retval]*/)
{
  return (*this)->get_MouthEnabled(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_MouthEnabled(void)
{
  short pVal;
  OLECHECK(this->get_MouthEnabled((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MouthEnabled(short pVal/*[in]*/)
{
  return (*this)->set_MouthEnabled(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_LastError(long* pVal/*[out,retval]*/)
{
  return (*this)->get_LastError(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_LastError(void)
{
  long pVal;
  OLECHECK(this->get_LastError((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_LastError(long pVal/*[in]*/)
{
  return (*this)->set_LastError(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_SuppressExceptions(short* pVal/*[out,retval]*/)
{
  return (*this)->get_SuppressExceptions(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_SuppressExceptions(void)
{
  short pVal;
  OLECHECK(this->get_SuppressExceptions((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_SuppressExceptions(short pVal/*[in]*/)
{
  return (*this)->set_SuppressExceptions(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_Speaking(short* pVal/*[out,retval]*/)
{
  return (*this)->get_Speaking(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_Speaking(void)
{
  short pVal;
  OLECHECK(this->get_Speaking((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_Speaking(short pVal/*[in]*/)
{
  return (*this)->set_Speaking(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_LastWordPosition(long* pVal/*[out,retval]*/)
{
  return (*this)->get_LastWordPosition(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_LastWordPosition(void)
{
  long pVal;
  OLECHECK(this->get_LastWordPosition((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_LastWordPosition(long pVal/*[in]*/)
{
  return (*this)->set_LastWordPosition(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_LipType(short* pVal/*[out,retval]*/)
{
  return (*this)->get_LipType(pVal);
}

template <class T> short __fastcall
TCOMIDirectSST<T>::get_LipType(void)
{
  short pVal;
  OLECHECK(this->get_LipType((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_LipType(short pVal/*[in]*/)
{
  return (*this)->set_LipType(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::GetPronunciation(long charset, BSTR text, long Sense, BSTR* Pronounce, 
                                    long* PartOfSpeech, BSTR* EngineInfo)
{
  return (*this)->GetPronunciation(charset, text, Sense, Pronounce, PartOfSpeech, EngineInfo);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::InitAudioDestDirect(long direct)
{
  return (*this)->InitAudioDestDirect(direct);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_Sayit(BSTR* newVal/*[out,retval]*/)
{
  return (*this)->get_Sayit(newVal);
}

template <class T> BSTR __fastcall
TCOMIDirectSST<T>::get_Sayit(void)
{
  BSTR newVal = 0;
  OLECHECK(this->get_Sayit((BSTR*)&newVal));
  return newVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_Sayit(BSTR newVal/*[in]*/)
{
  return (*this)->set_Sayit(newVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::InitAudioDestObject(long object)
{
  return (*this)->InitAudioDestObject(object);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_FileName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_FileName(pVal);
}

template <class T> BSTR __fastcall
TCOMIDirectSST<T>::get_FileName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_FileName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_FileName(BSTR pVal/*[in]*/)
{
  return (*this)->set_FileName(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_CurrentMode(long* pVal/*[out,retval]*/)
{
  return (*this)->get_CurrentMode(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_CurrentMode(void)
{
  long pVal;
  OLECHECK(this->get_CurrentMode((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_CurrentMode(long pVal/*[in]*/)
{
  return (*this)->set_CurrentMode(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_hWnd(long* pVal/*[out,retval]*/)
{
  return (*this)->get_hWnd(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_hWnd(void)
{
  long pVal;
  OLECHECK(this->get_hWnd((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::Find(BSTR RankList, long* index/*[out,retval]*/)
{
  return (*this)->Find(RankList, index);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::Find(BSTR RankList)
{
  long index;
  OLECHECK(this->Find(RankList, (long*)&index));
  return index;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_VolumeLeft(long* pVal/*[out,retval]*/)
{
  return (*this)->get_VolumeLeft(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_VolumeLeft(void)
{
  long pVal;
  OLECHECK(this->get_VolumeLeft((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_VolumeLeft(long pVal/*[in]*/)
{
  return (*this)->set_VolumeLeft(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MinVolumeLeft(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MinVolumeLeft(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_MinVolumeLeft(void)
{
  long pVal;
  OLECHECK(this->get_MinVolumeLeft((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MinVolumeLeft(long pVal/*[in]*/)
{
  return (*this)->set_MinVolumeLeft(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_MaxVolumeLeft(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MaxVolumeLeft(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_MaxVolumeLeft(void)
{
  long pVal;
  OLECHECK(this->get_MaxVolumeLeft((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_MaxVolumeLeft(long pVal/*[in]*/)
{
  return (*this)->set_MaxVolumeLeft(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_AudioDest(long* pVal/*[out,retval]*/)
{
  return (*this)->get_AudioDest(pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_AudioDest(void)
{
  long pVal;
  OLECHECK(this->get_AudioDest((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_Attributes(long Attrib, long* pVal/*[out,retval]*/)
{
  return (*this)->get_Attributes(Attrib, pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_Attributes(long Attrib)
{
  long pVal;
  OLECHECK(this->get_Attributes(Attrib, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_Attributes(long Attrib, long pVal/*[in]*/)
{
  return (*this)->set_Attributes(Attrib, pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_AttributeString(long Attrib, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_AttributeString(Attrib, pVal);
}

template <class T> BSTR __fastcall
TCOMIDirectSST<T>::get_AttributeString(long Attrib)
{
  BSTR pVal = 0;
  OLECHECK(this->get_AttributeString(Attrib, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_AttributeString(long Attrib, BSTR pVal/*[in]*/)
{
  return (*this)->set_AttributeString(Attrib, pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::get_AttributeMemory(long Attrib, long* size, long* pVal/*[out,retval]*/)
{
  return (*this)->get_AttributeMemory(Attrib, size, pVal);
}

template <class T> long __fastcall
TCOMIDirectSST<T>::get_AttributeMemory(long Attrib, long* size)
{
  long pVal;
  OLECHECK(this->get_AttributeMemory(Attrib, size, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::set_AttributeMemory(long Attrib, long* size, long pVal/*[in]*/)
{
  return (*this)->set_AttributeMemory(Attrib, size, pVal);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::LexAddTo(unsigned_long lex, long charset, BSTR text, BSTR Pronounce, 
                            long PartOfSpeech, long EngineInfo, long engineinfosize)
{
  return (*this)->LexAddTo(lex, charset, text, Pronounce, PartOfSpeech, EngineInfo, engineinfosize);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::LexGetFrom(long lex, long charset, BSTR text, long Sense, BSTR* Pronounce, 
                              long* PartOfSpeech, long* EngineInfo, long* sizeofengineinfo)
{
  return (*this)->LexGetFrom(lex, charset, text, Sense, Pronounce, PartOfSpeech, EngineInfo, 
                             sizeofengineinfo);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::LexRemoveFrom(long lex, BSTR text, long Sense)
{
  return (*this)->LexRemoveFrom(lex, text, Sense);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::QueryLexicons(long f, long* pdw)
{
  return (*this)->QueryLexicons(f, pdw);
}

template <class T> HRESULT __fastcall
TCOMIDirectSST<T>::ChangeSpelling(long lex, BSTR stringa, BSTR stringb)
{
  return (*this)->ChangeSpelling(lex, stringa, stringb);
}

// *********************************************************************//
// DispIntf:  IDirectSS
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EEE78590-FE22-11D0-8BEF-0060081841DE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_debug(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("debug"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_debug(void)
{
  short pVal;
  this->get_debug((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_debug(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("debug"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_Initialized(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Initialized"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_Initialized(void)
{
  short pVal;
  this->get_Initialized((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_Initialized(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Initialized"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::Speak(BSTR text)
{
  _TDispID _dispid(*this, OLETEXT("Speak"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_Pitch(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pitch"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_Pitch(void)
{
  long pVal;
  this->get_Pitch((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_Pitch(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pitch"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MaxPitch(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxPitch"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_MaxPitch(void)
{
  long pVal;
  this->get_MaxPitch((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MaxPitch(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxPitch"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MinPitch(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinPitch"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_MinPitch(void)
{
  long pVal;
  this->get_MinPitch((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MinPitch(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinPitch"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_Speed(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Speed"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_Speed(void)
{
  long pVal;
  this->get_Speed((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_Speed(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Speed"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MaxSpeed(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxSpeed"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_MaxSpeed(void)
{
  long pVal;
  this->get_MaxSpeed((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MaxSpeed(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxSpeed"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MinSpeed(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinSpeed"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_MinSpeed(void)
{
  long pVal;
  this->get_MinSpeed((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MinSpeed(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinSpeed"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_VolumeRight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VolumeRight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_VolumeRight(void)
{
  long pVal;
  this->get_VolumeRight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_VolumeRight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VolumeRight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MinVolumeRight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinVolumeRight"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_MinVolumeRight(void)
{
  long pVal;
  this->get_MinVolumeRight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MinVolumeRight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinVolumeRight"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MaxVolumeRight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxVolumeRight"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_MaxVolumeRight(void)
{
  long pVal;
  this->get_MaxVolumeRight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MaxVolumeRight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxVolumeRight"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::Select(int index)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::EngineID(int index, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EngineID"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IDirectSSDispT<T>::EngineID(int index)
{
  BSTR pVal;
  this->EngineID(index, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_CountEngines(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CountEngines"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_CountEngines(void)
{
  long pVal;
  this->get_CountEngines((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::ModeName(int index, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModeName"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IDirectSSDispT<T>::ModeName(int index)
{
  BSTR pVal;
  this->ModeName(index, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::MfgName(int index, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MfgName"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IDirectSSDispT<T>::MfgName(int index)
{
  BSTR pVal;
  this->MfgName(index, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::ProductName(int index, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProductName"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IDirectSSDispT<T>::ProductName(int index)
{
  BSTR pVal;
  this->ProductName(index, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::ModeID(int index, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModeID"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IDirectSSDispT<T>::ModeID(int index)
{
  BSTR pVal;
  this->ModeID(index, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::Speaker(int index, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Speaker"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IDirectSSDispT<T>::Speaker(int index)
{
  BSTR pVal;
  this->Speaker(index, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::Style(int index, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IDirectSSDispT<T>::Style(int index)
{
  BSTR pVal;
  this->Style(index, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::Gender(int index, long* Gender/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Gender"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Gender /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::Gender(int index)
{
  long Gender;
  this->Gender(index, (long*)&Gender);
  return Gender;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::Age(int index, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Age"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::Age(int index)
{
  long pVal;
  this->Age(index, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::Features(int index, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Features"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::Features(int index)
{
  long pVal;
  this->Features(index, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::Interfaces(int index, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interfaces"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::Interfaces(int index)
{
  long pVal;
  this->Interfaces(index, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::EngineFeatures(int index, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EngineFeatures"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::EngineFeatures(int index)
{
  long pVal;
  this->EngineFeatures(index, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::LanguageID(int index, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageID"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::LanguageID(int index)
{
  long pVal;
  this->LanguageID(index, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::Dialect(int index, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dialect"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IDirectSSDispT<T>::Dialect(int index)
{
  BSTR pVal;
  this->Dialect(index, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_RealTime(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RealTime"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_RealTime(void)
{
  long pVal;
  this->get_RealTime((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_RealTime(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RealTime"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MaxRealTime(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxRealTime"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_MaxRealTime(void)
{
  long pVal;
  this->get_MaxRealTime((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MinRealTime(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinRealTime"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_MinRealTime(void)
{
  long pVal;
  this->get_MinRealTime((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MinRealTime(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinRealTime"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::AudioPause()
{
  _TDispID _dispid(*this, OLETEXT("AudioPause"), DISPID(35));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::AudioReset()
{
  _TDispID _dispid(*this, OLETEXT("AudioReset"), DISPID(36));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::AudioResume()
{
  _TDispID _dispid(*this, OLETEXT("AudioResume"), DISPID(37));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::Inject(BSTR value)
{
  _TDispID _dispid(*this, OLETEXT("Inject"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_Tagged(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tagged"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_Tagged(void)
{
  long pVal;
  this->get_Tagged((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_Tagged(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tagged"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::Phonemes(long charset, long Flags, BSTR input, BSTR* output/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Phonemes"), DISPID(40));
  TAutoArgs<3> _args;
  _args[1] = charset /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = input /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(output /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IDirectSSDispT<T>::Phonemes(long charset, long Flags, BSTR input)
{
  BSTR output;
  this->Phonemes(charset, Flags, input, (BSTR*)&output);
  return output;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::PosnGet(long* hi, long* lo)
{
  _TDispID _dispid(*this, OLETEXT("PosnGet"), DISPID(41));
  TAutoArgs<2> _args;
  _args[1] = hi /*[VT_I4:1]*/;
  _args[2] = lo /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::TextData(long characterset, long Flags, BSTR text)
{
  _TDispID _dispid(*this, OLETEXT("TextData"), DISPID(42));
  TAutoArgs<3> _args;
  _args[1] = characterset /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = text /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::InitAudioDestMM(long deviceid)
{
  _TDispID _dispid(*this, OLETEXT("InitAudioDestMM"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = deviceid /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::AboutDlg(long hWnd, BSTR title)
{
  _TDispID _dispid(*this, OLETEXT("AboutDlg"), DISPID(44));
  TAutoArgs<2> _args;
  _args[1] = hWnd /*[VT_I4:0]*/;
  _args[2] = title /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::GeneralDlg(long hWnd, BSTR title)
{
  _TDispID _dispid(*this, OLETEXT("GeneralDlg"), DISPID(45));
  TAutoArgs<2> _args;
  _args[1] = hWnd /*[VT_I4:0]*/;
  _args[2] = title /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::LexiconDlg(long hWnd, BSTR title)
{
  _TDispID _dispid(*this, OLETEXT("LexiconDlg"), DISPID(46));
  TAutoArgs<2> _args;
  _args[1] = hWnd /*[VT_I4:0]*/;
  _args[2] = title /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::TranslateDlg(long hWnd, BSTR title)
{
  _TDispID _dispid(*this, OLETEXT("TranslateDlg"), DISPID(47));
  TAutoArgs<2> _args;
  _args[1] = hWnd /*[VT_I4:0]*/;
  _args[2] = title /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::FindEngine(BSTR EngineID, BSTR MfgName, BSTR ProductName, BSTR ModeID, 
                              BSTR ModeName, long LanguageID, BSTR Dialect, BSTR Speaker, BSTR Style
                              , long Gender, long Age, long Features, long Interfaces, 
                              long EngineFeatures, long RankEngineID, long RankMfgName, 
                              long RankProductName, long RankModeID, long RankModeName, 
                              long RankLanguage, long RankDialect, long RankSpeaker, long RankStyle
                              , long RankGender, long RankAge, long RankFeatures, 
                              long RankInterfaces, long RankEngineFeatures, 
                              long* index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindEngine"), DISPID(48));
  TAutoArgs<28> _args;
  _args[1] = EngineID /*[VT_BSTR:0]*/;
  _args[2] = MfgName /*[VT_BSTR:0]*/;
  _args[3] = ProductName /*[VT_BSTR:0]*/;
  _args[4] = ModeID /*[VT_BSTR:0]*/;
  _args[5] = ModeName /*[VT_BSTR:0]*/;
  _args[6] = LanguageID /*[VT_I4:0]*/;
  _args[7] = Dialect /*[VT_BSTR:0]*/;
  _args[8] = Speaker /*[VT_BSTR:0]*/;
  _args[9] = Style /*[VT_BSTR:0]*/;
  _args[10] = Gender /*[VT_I4:0]*/;
  _args[11] = Age /*[VT_I4:0]*/;
  _args[12] = Features /*[VT_I4:0]*/;
  _args[13] = Interfaces /*[VT_I4:0]*/;
  _args[14] = EngineFeatures /*[VT_I4:0]*/;
  _args[15] = RankEngineID /*[VT_I4:0]*/;
  _args[16] = RankMfgName /*[VT_I4:0]*/;
  _args[17] = RankProductName /*[VT_I4:0]*/;
  _args[18] = RankModeID /*[VT_I4:0]*/;
  _args[19] = RankModeName /*[VT_I4:0]*/;
  _args[20] = RankLanguage /*[VT_I4:0]*/;
  _args[21] = RankDialect /*[VT_I4:0]*/;
  _args[22] = RankSpeaker /*[VT_I4:0]*/;
  _args[23] = RankStyle /*[VT_I4:0]*/;
  _args[24] = RankGender /*[VT_I4:0]*/;
  _args[25] = RankAge /*[VT_I4:0]*/;
  _args[26] = RankFeatures /*[VT_I4:0]*/;
  _args[27] = RankInterfaces /*[VT_I4:0]*/;
  _args[28] = RankEngineFeatures /*[VT_I4:0]*/;
  return OutRetValSetterPtr(index /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::FindEngine(BSTR EngineID, BSTR MfgName, BSTR ProductName, BSTR ModeID, 
                              BSTR ModeName, long LanguageID, BSTR Dialect, BSTR Speaker, BSTR Style, 
                              long Gender, long Age, long Features, long Interfaces, 
                              long EngineFeatures, long RankEngineID, long RankMfgName, 
                              long RankProductName, long RankModeID, long RankModeName, 
                              long RankLanguage, long RankDialect, long RankSpeaker, long RankStyle, 
                              long RankGender, long RankAge, long RankFeatures, long RankInterfaces, 
                              long RankEngineFeatures)
{
  long index;
  this->FindEngine(EngineID, MfgName, ProductName, ModeID, ModeName, LanguageID, Dialect, Speaker, 
                   Style, Gender, Age, Features, Interfaces, EngineFeatures, RankEngineID, 
                   RankMfgName, RankProductName, RankModeID, RankModeName, RankLanguage, RankDialect, 
                   RankSpeaker, RankStyle, RankGender, RankAge, RankFeatures, RankInterfaces, 
                   RankEngineFeatures, (long*)&index);
  return index;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MouthHeight(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouthHeight"), DISPID(49));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_MouthHeight(void)
{
  short pVal;
  this->get_MouthHeight((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MouthHeight(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouthHeight"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MouthWidth(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouthWidth"), DISPID(50));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_MouthWidth(void)
{
  short pVal;
  this->get_MouthWidth((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MouthWidth(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouthWidth"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MouthUpturn(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouthUpturn"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_MouthUpturn(void)
{
  short pVal;
  this->get_MouthUpturn((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MouthUpturn(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouthUpturn"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_JawOpen(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("JawOpen"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_JawOpen(void)
{
  short pVal;
  this->get_JawOpen((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_JawOpen(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("JawOpen"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_TeethUpperVisible(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TeethUpperVisible"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_TeethUpperVisible(void)
{
  short pVal;
  this->get_TeethUpperVisible((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_TeethUpperVisible(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TeethUpperVisible"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_TeethLowerVisible(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TeethLowerVisible"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_TeethLowerVisible(void)
{
  short pVal;
  this->get_TeethLowerVisible((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_TeethLowerVisible(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TeethLowerVisible"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_TonguePosn(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TonguePosn"), DISPID(55));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_TonguePosn(void)
{
  short pVal;
  this->get_TonguePosn((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_TonguePosn(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TonguePosn"), DISPID(55));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_LipTension(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LipTension"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_LipTension(void)
{
  short pVal;
  this->get_LipTension((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_LipTension(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LipTension"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_CallBacksEnabled(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallBacksEnabled"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_CallBacksEnabled(void)
{
  short pVal;
  this->get_CallBacksEnabled((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_CallBacksEnabled(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CallBacksEnabled"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MouthEnabled(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouthEnabled"), DISPID(58));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_MouthEnabled(void)
{
  short pVal;
  this->get_MouthEnabled((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MouthEnabled(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouthEnabled"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_LastError(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastError"), DISPID(59));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_LastError(void)
{
  long pVal;
  this->get_LastError((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_LastError(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastError"), DISPID(59));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_SuppressExceptions(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SuppressExceptions"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_SuppressExceptions(void)
{
  short pVal;
  this->get_SuppressExceptions((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_SuppressExceptions(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SuppressExceptions"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_Speaking(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Speaking"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_Speaking(void)
{
  short pVal;
  this->get_Speaking((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_Speaking(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Speaking"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_LastWordPosition(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastWordPosition"), DISPID(62));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_LastWordPosition(void)
{
  long pVal;
  this->get_LastWordPosition((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_LastWordPosition(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastWordPosition"), DISPID(62));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_LipType(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LipType"), DISPID(63));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IDirectSSDispT<T>::get_LipType(void)
{
  short pVal;
  this->get_LipType((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_LipType(short pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LipType"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::GetPronunciation(long charset, BSTR text, long Sense, BSTR* Pronounce, 
                                    long* PartOfSpeech, BSTR* EngineInfo)
{
  _TDispID _dispid(*this, OLETEXT("GetPronunciation"), DISPID(64));
  TAutoArgs<6> _args;
  _args[1] = charset /*[VT_I4:0]*/;
  _args[2] = text /*[VT_BSTR:0]*/;
  _args[3] = Sense /*[VT_I4:0]*/;
  _args[4] = Pronounce /*[VT_BSTR:1]*/;
  _args[5] = PartOfSpeech /*[VT_I4:1]*/;
  _args[6] = EngineInfo /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::InitAudioDestDirect(long direct)
{
  _TDispID _dispid(*this, OLETEXT("InitAudioDestDirect"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = direct /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_Sayit(BSTR* newVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sayit"), DISPID(66));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(newVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDirectSSDispT<T>::get_Sayit(void)
{
  BSTR newVal;
  this->get_Sayit((BSTR*)&newVal);
  return newVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_Sayit(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sayit"), DISPID(66));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::InitAudioDestObject(long object)
{
  _TDispID _dispid(*this, OLETEXT("InitAudioDestObject"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = object /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_FileName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(68));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDirectSSDispT<T>::get_FileName(void)
{
  BSTR pVal;
  this->get_FileName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_FileName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(68));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_CurrentMode(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentMode"), DISPID(69));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_CurrentMode(void)
{
  long pVal;
  this->get_CurrentMode((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_CurrentMode(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentMode"), DISPID(69));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_hWnd(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(70));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_hWnd(void)
{
  long pVal;
  this->get_hWnd((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::Find(BSTR RankList, long* index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(71));
  TAutoArgs<1> _args;
  _args[1] = RankList /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(index /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::Find(BSTR RankList)
{
  long index;
  this->Find(RankList, (long*)&index);
  return index;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_VolumeLeft(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VolumeLeft"), DISPID(72));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_VolumeLeft(void)
{
  long pVal;
  this->get_VolumeLeft((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_VolumeLeft(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VolumeLeft"), DISPID(72));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MinVolumeLeft(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinVolumeLeft"), DISPID(73));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_MinVolumeLeft(void)
{
  long pVal;
  this->get_MinVolumeLeft((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MinVolumeLeft(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinVolumeLeft"), DISPID(73));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_MaxVolumeLeft(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxVolumeLeft"), DISPID(74));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_MaxVolumeLeft(void)
{
  long pVal;
  this->get_MaxVolumeLeft((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_MaxVolumeLeft(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxVolumeLeft"), DISPID(74));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_AudioDest(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioDest"), DISPID(75));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_AudioDest(void)
{
  long pVal;
  this->get_AudioDest((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_Attributes(long Attrib, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Attributes"), DISPID(76));
  TAutoArgs<1> _args;
  _args[1] = Attrib /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_Attributes(long Attrib)
{
  long pVal;
  this->get_Attributes(Attrib, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_Attributes(long Attrib, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Attributes"), DISPID(76));
  TAutoArgs<2> _args;
  _args[1] = Attrib /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_AttributeString(long Attrib, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AttributeString"), DISPID(77));
  TAutoArgs<1> _args;
  _args[1] = Attrib /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDirectSSDispT<T>::get_AttributeString(long Attrib)
{
  BSTR pVal;
  this->get_AttributeString(Attrib, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_AttributeString(long Attrib, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AttributeString"), DISPID(77));
  TAutoArgs<2> _args;
  _args[1] = Attrib /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::get_AttributeMemory(long Attrib, long* size, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AttributeMemory"), DISPID(78));
  TAutoArgs<2> _args;
  _args[1] = Attrib /*[VT_I4:0]*/;
  _args[2] = size /*[VT_I4:1]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDirectSSDispT<T>::get_AttributeMemory(long Attrib, long* size)
{
  long pVal;
  this->get_AttributeMemory(Attrib, size, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::set_AttributeMemory(long Attrib, long* size, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AttributeMemory"), DISPID(78));
  TAutoArgs<3> _args;
  _args[1] = Attrib /*[VT_I4:0]*/;
  _args[2] = size /*[VT_I4:1]*/;
  _args[3] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::LexAddTo(unsigned_long lex, long charset, BSTR text, BSTR Pronounce, 
                            long PartOfSpeech, long EngineInfo, long engineinfosize)
{
  _TDispID _dispid(*this, OLETEXT("LexAddTo"), DISPID(79));
  TAutoArgs<7> _args;
  _args[1] = lex /*[VT_UI4:0]*/;
  _args[2] = charset /*[VT_I4:0]*/;
  _args[3] = text /*[VT_BSTR:0]*/;
  _args[4] = Pronounce /*[VT_BSTR:0]*/;
  _args[5] = PartOfSpeech /*[VT_I4:0]*/;
  _args[6] = EngineInfo /*[VT_I4:0]*/;
  _args[7] = engineinfosize /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::LexGetFrom(long lex, long charset, BSTR text, long Sense, BSTR* Pronounce, 
                              long* PartOfSpeech, long* EngineInfo, long* sizeofengineinfo)
{
  _TDispID _dispid(*this, OLETEXT("LexGetFrom"), DISPID(80));
  TAutoArgs<8> _args;
  _args[1] = lex /*[VT_I4:0]*/;
  _args[2] = charset /*[VT_I4:0]*/;
  _args[3] = text /*[VT_BSTR:0]*/;
  _args[4] = Sense /*[VT_I4:0]*/;
  _args[5] = Pronounce /*[VT_BSTR:1]*/;
  _args[6] = PartOfSpeech /*[VT_I4:1]*/;
  _args[7] = EngineInfo /*[VT_I4:1]*/;
  _args[8] = sizeofengineinfo /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::LexRemoveFrom(long lex, BSTR text, long Sense)
{
  _TDispID _dispid(*this, OLETEXT("LexRemoveFrom"), DISPID(81));
  TAutoArgs<3> _args;
  _args[1] = lex /*[VT_I4:0]*/;
  _args[2] = text /*[VT_BSTR:0]*/;
  _args[3] = Sense /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::QueryLexicons(long f, long* pdw)
{
  _TDispID _dispid(*this, OLETEXT("QueryLexicons"), DISPID(82));
  TAutoArgs<2> _args;
  _args[1] = f /*[VT_I4:0]*/;
  _args[2] = pdw /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectSSDispT<T>::ChangeSpelling(long lex, BSTR stringa, BSTR stringb)
{
  _TDispID _dispid(*this, OLETEXT("ChangeSpelling"), DISPID(83));
  TAutoArgs<3> _args;
  _args[1] = lex /*[VT_I4:0]*/;
  _args[2] = stringa /*[VT_BSTR:0]*/;
  _args[3] = stringb /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : DirectSS
// Event Interface : _DirectSSEvents
// *********************************************************************//
template <class T>
class TEvents_DirectSS : public IConnectionPointImpl<T,
                                                 &DIID__DirectSSEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_ClickIn(long x, long y);
  void            Fire_ClickOut(long x, long y);
  void            Fire_AudioStart(long hi, long lo);
  void            Fire_AudioStop(long hi, long lo);
  HRESULT         Fire_AttribChanged(long which_attribute);
  HRESULT         Fire_Visual(long timehi, long timelo, short Phoneme, short EnginePhoneme, 
                              long hints, short MouthHeight, short bMouthWidth, short bMouthUpturn, 
                              short bJawOpen, short TeethUpperVisible, short TeethLowerVisible, 
                              short TonguePosn, short LipTension);
  HRESULT         Fire_WordPosition(long hi, long lo, long byteoffset);
  HRESULT         Fire_BookMark(long hi, long lo, long MarkNum);
  HRESULT         Fire_TextDataStarted(long hi, long lo);
  HRESULT         Fire_TextDataDone(long hi, long lo, long Flags);
  HRESULT         Fire_ActiveVoiceStartup(long init, long init2);
  HRESULT         Fire_Debugging(void);
  HRESULT         Fire_Error(unsigned_long warning, BSTR Details, BSTR Message);
  HRESULT         Fire_warning(unsigned_long warning, BSTR Details, BSTR Message);
  HRESULT         Fire_VisualFuture(long milliseconds, long timehi, long timelo, short Phoneme, 
                                    short EnginePhoneme, long hints, short MouthHeight, 
                                    short bMouthWidth, short bMouthUpturn, short bJawOpen, 
                                    short TeethUpperVisible, short TeethLowerVisible, 
                                    short TonguePosn, short LipTension);
protected:
  _DirectSSEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_DirectSS<T>::Fire_ClickIn(long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ClickIn(x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DirectSS<T>::Fire_ClickOut(long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ClickOut(x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DirectSS<T>::Fire_AudioStart(long hi, long lo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AudioStart(hi, lo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_DirectSS<T>::Fire_AudioStop(long hi, long lo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AudioStop(hi, lo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_DirectSS<T>::Fire_AttribChanged(long which_attribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AttribChanged(which_attribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_DirectSS<T>::Fire_Visual(long timehi, long timelo, short Phoneme, short EnginePhoneme, 
                                 long hints, short MouthHeight, short bMouthWidth, 
                                 short bMouthUpturn, short bJawOpen, short TeethUpperVisible, 
                                 short TeethLowerVisible, short TonguePosn, short LipTension)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Visual(timehi, timelo, Phoneme, EnginePhoneme, hints, MouthHeight, bMouthWidth, 
                            bMouthUpturn, bJawOpen, TeethUpperVisible, TeethLowerVisible, TonguePosn, 
                            LipTension);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_DirectSS<T>::Fire_WordPosition(long hi, long lo, long byteoffset)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.WordPosition(hi, lo, byteoffset);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_DirectSS<T>::Fire_BookMark(long hi, long lo, long MarkNum)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BookMark(hi, lo, MarkNum);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_DirectSS<T>::Fire_TextDataStarted(long hi, long lo)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.TextDataStarted(hi, lo);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_DirectSS<T>::Fire_TextDataDone(long hi, long lo, long Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.TextDataDone(hi, lo, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_DirectSS<T>::Fire_ActiveVoiceStartup(long init, long init2)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ActiveVoiceStartup(init, init2);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_DirectSS<T>::Fire_Debugging(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Debugging();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_DirectSS<T>::Fire_Error(unsigned_long warning, BSTR Details, BSTR Message)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(warning, Details, Message);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_DirectSS<T>::Fire_warning(unsigned_long warning, BSTR Details, BSTR Message)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.warning(warning, Details, Message);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_DirectSS<T>::Fire_VisualFuture(long milliseconds, long timehi, long timelo, short Phoneme, 
                                       short EnginePhoneme, long hints, short MouthHeight, 
                                       short bMouthWidth, short bMouthUpturn, short bJawOpen, 
                                       short TeethUpperVisible, short TeethLowerVisible, 
                                       short TonguePosn, short LipTension)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.VisualFuture(milliseconds, timehi, timelo, Phoneme, EnginePhoneme, hints, 
                                  MouthHeight, bMouthWidth, bMouthUpturn, bJawOpen, 
                                  TeethUpperVisible, TeethLowerVisible, TonguePosn, LipTension);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

#endif    //   __TLB_NO_EVENT_WRAPPERS

#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_DAX)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : DirectSS
// Event Interface : _DirectSSEvents
// *********************************************************************//
template <typename T>
class IDirectSS_EventsDispatcher : public IUnknown
{
public:
  void Fire_ClickIn(long x, long y)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.ClickIn(x, y);
  }

  void Fire_ClickOut(long x, long y)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.ClickOut(x, y);
  }

  void Fire_AudioStart(long hi, long lo)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.AudioStart(hi, lo);
  }

  void Fire_AudioStop(long hi, long lo)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.AudioStop(hi, lo);
  }

  HRESULT Fire_AttribChanged(long which_attribute)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.AttribChanged(which_attribute);
    return S_OK;
  }

  HRESULT Fire_Visual(long timehi, long timelo, short Phoneme, short EnginePhoneme, long hints, 
                      short MouthHeight, short bMouthWidth, short bMouthUpturn, short bJawOpen, 
                      short TeethUpperVisible, short TeethLowerVisible, short TonguePosn, 
                      short LipTension)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.Visual(timehi, timelo, Phoneme, EnginePhoneme, hints, MouthHeight, bMouthWidth, 
                         bMouthUpturn, bJawOpen, TeethUpperVisible, TeethLowerVisible, TonguePosn, 
                         LipTension);
    return S_OK;
  }

  HRESULT Fire_WordPosition(long hi, long lo, long byteoffset)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.WordPosition(hi, lo, byteoffset);
    return S_OK;
  }

  HRESULT Fire_BookMark(long hi, long lo, long MarkNum)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.BookMark(hi, lo, MarkNum);
    return S_OK;
  }

  HRESULT Fire_TextDataStarted(long hi, long lo)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.TextDataStarted(hi, lo);
    return S_OK;
  }

  HRESULT Fire_TextDataDone(long hi, long lo, long Flags)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.TextDataDone(hi, lo, Flags);
    return S_OK;
  }

  HRESULT Fire_ActiveVoiceStartup(long init, long init2)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.ActiveVoiceStartup(init, init2);
    return S_OK;
  }

  HRESULT Fire_Debugging(void)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.Debugging();
    return S_OK;
  }

  HRESULT Fire_Error(unsigned_long warning, BSTR Details, BSTR Message)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.Error(warning, Details, Message);
    return S_OK;
  }

  HRESULT Fire_warning(unsigned_long warning, BSTR Details, BSTR Message)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.warning(warning, Details, Message);
    return S_OK;
  }

  HRESULT Fire_VisualFuture(long milliseconds, long timehi, long timelo, short Phoneme, 
                            short EnginePhoneme, long hints, short MouthHeight, short bMouthWidth, 
                            short bMouthUpturn, short bJawOpen, short TeethUpperVisible, 
                            short TeethLowerVisible, short TonguePosn, short LipTension)
  {
    _DirectSSEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.VisualFuture(milliseconds, timehi, timelo, Phoneme, EnginePhoneme, hints, 
                               MouthHeight, bMouthWidth, bMouthUpturn, bJawOpen, TeethUpperVisible, 
                               TeethLowerVisible, TonguePosn, LipTension);
    return S_OK;
  }

};

#endif    //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Activevoiceprojectlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Activevoiceprojectlib_tlb;
#endif

#pragma option pop

#endif // ACTIVEVOICEPROJECTLib_TLBH
